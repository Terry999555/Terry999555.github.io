<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>到了我的周末</title>
  <icon>https://www.gravatar.com/avatar/8cc716563f6e51ddfa6172ff8dbab55c</icon>
  <subtitle>要想前行,就要离开现在停留的地方.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.999555yun.com/"/>
  <updated>2019-10-14T09:36:46.796Z</updated>
  <id>http://www.999555yun.com/</id>
  
  <author>
    <name>Terry</name>
    <email>999555yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云搭建自己的Nexus仓库</title>
    <link href="http://www.999555yun.com/2019/10/12/Nexus%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%93%E5%BA%93/"/>
    <id>http://www.999555yun.com/2019/10/12/Nexus搭建自己的仓库/</id>
    <published>2019-10-12T14:20:16.000Z</published>
    <updated>2019-10-14T09:36:46.796Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>私有服务器，是公司内部 Maven 项目经常需要的，Nexus 是常用的私用 Maven 服务器</p></blockquote><a id="more"></a><h5 id="安装-jdk"><a href="#安装-jdk" class="headerlink" title="安装 jdk"></a>安装 jdk</h5><p> Nexus 需要 jdk环境，在安装前需要确认你的 centos 机器上已经安装好了 jdk ， 如果没有安装可以执行以下命令安装</p><blockquote><p><code>yum install java</code></p></blockquote><p>安装完成后，可以查看 jdk 的版本号</p><blockquote><p><code>java -version</code></p></blockquote><h5 id="下载-Nexus"><a href="#下载-Nexus" class="headerlink" title="下载 Nexus"></a>下载 Nexus</h5><p>Nexus 官网：<a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">https://www.sonatype.com/nexus-repository-oss</a></p><p>下载 Nexus 到阿里云，你可以放在任意指定的位置，我是下载到 /usr/soft/ 目录，下载命令</p><blockquote><p><code>wget http://download.sonatype.com/nexus/3/nexus-3.16.2-01-unix.tar.gz</code></p></blockquote><p>解压</p><blockquote><p>tar zxvf nexus-3.7.1-02-unix.tar.gz</p></blockquote><p>解压完成后，进入到文件夹里面，输入pwd命令，查看目录，后面配置环境的时候会用到。<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191012/135551597.jpg" alt="mark"></p><p>得到安装nexus的路径。</p><h5 id="配置-nexus环境变量"><a href="#配置-nexus环境变量" class="headerlink" title="配置 nexus环境变量"></a>配置 nexus环境变量</h5><p>cd / 到 根目录（先安装vim）<br>使用命令 <code>vim /etc/frofile</code><br>再文件的最后添加两行<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191012/153904506.jpg" alt="@配置后的效果"></p><p>然后退出保存，重新加载，让配置生效。<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/重新加载profile文件，让配置生效</span></span><br><span class="line"><span class="regexp">source profile</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/或者，这个命令在任何目录都可以操作 </span></span><br><span class="line"><span class="regexp">source /etc</span><span class="regexp">/profile</span></span><br></pre></td></tr></table></figure></p><p>配置完成</p><h5 id="启动nexus"><a href="#启动nexus" class="headerlink" title="启动nexus"></a>启动nexus</h5><ol><li>进入nexus的跟目录下的bin 目录<br><strong>启动</strong>  <code>start nexus</code></li></ol><p><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191012/160353309.jpg" alt="@启动|center|300*50"></p><p><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191012/155615716.jpg" alt="@启动后的页面|center|300*120"></p><h5 id="更改端口"><a href="#更改端口" class="headerlink" title="更改端口"></a>更改端口</h5><p>nexus 默认端口是 8081 , 如果端口被占用了，则需要重新为 nexus 指定端口，端口的配置文件在安装目录下的 etc 目录，如下所示</p><p><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191012/155227567.jpg" alt="@修改端口|center|300*120"><br>这样我们就把 nexus 的端口从 8081 改为 8084 , 还需要重启 nexus服务</p><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><p>命令 <code>nexus restart</code><br>常用命令<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/启动</span></span><br><span class="line"><span class="regexp">nexus start</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/停止</span></span><br><span class="line"><span class="regexp">nexus stop</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/重启</span></span><br><span class="line"><span class="regexp">nexus restart</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/查看状态</span></span><br><span class="line"><span class="regexp">nexus status</span></span><br></pre></td></tr></table></figure></p><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><blockquote><p>Nexus 启动好了之后，创建我们自己的仓库。</p><ol><li>登陆<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191012/155758646.jpg" alt="@进入|center|300*120"><br>2.创建<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/163644792.jpg" alt="@创建仓库|center|300*100"><br>3.创建hosted 仓库<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/163931757.jpg" alt="@不同类型仓库|center|300*100"></li></ol><ul><li><strong>group</strong>：是一个仓库组，可包含hosted和proxy两种库，下载时按配置顺序从中依次查找。</li><li><strong>hosted</strong>：一般部署我们自己项目打包的jar，供内部人员下载。</li><li><strong>proxy</strong>：代理远程仓库，maven-central是默认maven中央仓库代理，maven-aliyun是后加的阿里远程库代理，通过代理从远程库中下载的依赖都会被缓存到nexus的proxy库中。</li></ul></blockquote><p>我们选择maven2(hosted) 类型的<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/164312165.jpg" alt="@创建|center|300*200"></p><ol start="4"><li>创建好仓库<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/164645727.jpg" alt="@创建好的仓库|center|300*200"></li></ol><p><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/164734096.jpg" alt="@详情|center|300*200"></p><h4 id="上传arr到Maven仓库"><a href="#上传arr到Maven仓库" class="headerlink" title="上传arr到Maven仓库"></a>上传arr到Maven仓库</h4><p>1在Project的gradle.properties 文件中添加如下代码</p><p><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/150701394.png" alt="@gradle.properties配置信息|center|300*100"></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Maven URL</span></span><br><span class="line">MAVEN_URL= <span class="symbol">http:</span>/<span class="regexp">/47.105.41.146:8081/repository</span><span class="regexp">/NexusLibrary/</span></span><br><span class="line">GROUP=com.cyy.android</span><br><span class="line"><span class="comment">#登录nexus 系统的用户名</span></span><br><span class="line">NEXUS_USERNAME=username</span><br><span class="line"><span class="comment">#登录nexus 系统的密码</span></span><br><span class="line">NEXUS_PASSWORD=passwprd</span><br><span class="line"><span class="comment"># 组ID</span></span><br><span class="line">GROUP_ID = com.cyy.android</span><br><span class="line"><span class="comment"># type</span></span><br><span class="line">TYPE = aar</span><br><span class="line"><span class="comment"># 描述</span></span><br><span class="line">DESCRIPTION = component</span><br></pre></td></tr></table></figure><p>2.对应module的build.gradle文件顶部添加插件<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">apply <span class="symbol">plugin:</span> <span class="string">'maven'</span></span><br></pre></td></tr></table></figure></p><p>3.每一次修改记得要修改版本号，相同版本号提交失败，是不会覆盖的（可以再nexus系统设置）<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">        ......</span><br><span class="line">        versionName <span class="string">"1.0.0"</span>/<span class="regexp">/ 组件版本号(每次升级改变)</span></span><br><span class="line"><span class="regexp">        ...</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><ol start="4"><li>对应module的build.gradle添加如下代码<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/150244549.jpg" alt="@脚本|center|350*150"><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">uploadArchives &#123;<span class="regexp">//</span>脚本的上传</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(<span class="symbol">url:</span> MAVEN_LOCAL_PATH) &#123;</span><br><span class="line">                authentication(<span class="symbol">userName:</span> ACCOUNT, <span class="symbol">password:</span> PASSWORD)</span><br><span class="line">            &#125;</span><br><span class="line">            pom.project &#123;</span><br><span class="line">                groupId GROUP_ID</span><br><span class="line">                artifactId <span class="string">'nexus'</span>/<span class="regexp">/工程名</span></span><br><span class="line"><span class="regexp">                version '1.0.x'</span></span><br><span class="line"><span class="regexp">                packaging TYPE</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>. 5project 的builde.gradle </p><ul><li>全局的builder.gradle 配置<br>再 <strong>buildscript</strong>的<code>repositories</code> 中 和<strong>allprojects</strong><code>repositories</code> 中加入<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">maven &#123;<span class="regexp">//</span>阿里云nexus仓库</span><br><span class="line">url <span class="string">"http://47.105.41.146:8081/repository/maven-public/"</span></span><br><span class="line">     &#125;</span><br><span class="line">maven &#123;<span class="regexp">//</span>自己nexus仓库地址</span><br><span class="line">url <span class="string">"http://47.105.41.146:8081/repository/maven-public/"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>6.打包上传(双击uploadArchives)<br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/165919785.jpg" alt="@上传|center|300*120"><br><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191014/170453260.jpg" alt="@成功|center|300*120"><br>开发完组件上传,version 改为高版本，点击as右侧gradle—&gt;model（aar）—&gt;Tasks—&gt;upload—&gt;uploadArchives。</p><p><img src="http://999555yun.oss-cn-shanghai.aliyuncs.com/blog/20191012/161247046.jpg" alt="@发布版本|center|300*120"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;私有服务器，是公司内部 Maven 项目经常需要的，Nexus 是常用的私用 Maven 服务器&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Nexus仓库" scheme="http://www.999555yun.com/tags/Nexus%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>微信PC多开</title>
    <link href="http://www.999555yun.com/2019/01/23/%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80/"/>
    <id>http://www.999555yun.com/2019/01/23/微信多开/</id>
    <published>2019-01-23T12:55:14.000Z</published>
    <updated>2019-10-14T09:59:10.763Z</updated>
    
    <content type="html"><![CDATA[<h4 id="微信PC多开"><a href="#微信PC多开" class="headerlink" title="微信PC多开"></a>微信PC多开</h4><a id="more"></a><ol><li>找到微信的图标—&gt;点击属性—&gt;打开文件家所在的位置—&gt;复制路径。</li><li>键盘  Windows + R 进入cmd 页面—&gt;首先进入到微信在的盘，然后再去cd 到微信的目录。</li><li>使用命令 start WeChat.ext&amp;WeChat.ext</li><li>打开几个 拼接几个WeCaht.exe</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;微信PC多开&quot;&gt;&lt;a href=&quot;#微信PC多开&quot; class=&quot;headerlink&quot; title=&quot;微信PC多开&quot;&gt;&lt;/a&gt;微信PC多开&lt;/h4&gt;
    
    </summary>
    
    
      <category term="WeChat" scheme="http://www.999555yun.com/tags/WeChat/"/>
    
  </entry>
  
  <entry>
    <title>序列化</title>
    <link href="http://www.999555yun.com/2018/02/20/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://www.999555yun.com/2018/02/20/序列化/</id>
    <published>2018-02-20T08:22:30.000Z</published>
    <updated>2018-01-26T06:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Android-序列化Serializable和Parcelable"><a href="#Android-序列化Serializable和Parcelable" class="headerlink" title="Android 序列化Serializable和Parcelable"></a>Android 序列化Serializable和Parcelable</h4><a id="more"></a><h4 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h4><ul><li><strong>序列化</strong><blockquote><p><strong>序列化</strong> (Serialization)将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。<br>二进制序列化保持类型保真度，这对于在应用程序的不同调用之间保留对象的状态很有用。例如，通过将对象序列化到剪贴板，可在不同的应用程序之间共享对象。您可以将对象序列化到流、磁盘、内存和网络等等。远程处理使用序列化“通过值”在计算机或应用程序域之间传递对象。<br><strong>简单地说，“序列化”就是将运行时的对象状态转换成二进制，然后保存到流、内存或者通过网络传输给其他端。</strong></p></blockquote></li></ul><ul><li><strong>反序列化</strong><blockquote><p>将二进制转化成对象</p></blockquote><h4 id="序列化的目的"><a href="#序列化的目的" class="headerlink" title="序列化的目的"></a>序列化的目的</h4><blockquote><p>在底层，系统是不认识对象的，只认识字节序列。</p></blockquote></li></ul><ol><li>跨进程通信</li><li>对象可以在activity之间和网络的传递。</li><li>实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上(通常存放在文件里)。</li></ol><h4 id="Android-如何实现序列化"><a href="#Android-如何实现序列化" class="headerlink" title="Android 如何实现序列化"></a>Android 如何实现序列化</h4><blockquote><ol><li>实现Serializable接口</li><li>实现Parcelable接口（android原生）</li></ol></blockquote><p><strong>实现Serializable接口</strong><br>原理—&gt;Serializabale接口是一个空接口，实际上<strong>只提供标记的功能</strong>，标记实现了该接口的对象是可以进行序列化的，而具体的序列化与反序列化操作是由<strong>ObjectOutputStream</strong>和<strong>ObjectInputStream</strong>完成的。内部采用<strong>java的反射机制</strong>，在运行时判断类的serialVersionUID来验证版本一致性的。在进行<strong>反序列化时</strong>，JVM会把传来的字节流中的<strong>serialVersionUID与本地相应实体（类）的serialVersionUID进行比较</strong>，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，所以相比之下消耗一定的性能，开销比较大。</p><p><strong>serialVersionUID</strong></p><ul><li>运行时这个版本号唯一标识了一个可序列化的类</li><li>反序列化时检查你要反序列化成的对象版本号是否一致，不一致 报 InvalidClassException。</li><li>如果我们不自己创建这个版本号，序列化过程中运行时会根据类的许多特点计算出一个默认版本号。</li><li>因此 JVM 规范强烈 建议我们手动声明一个版本号，这个数字可以是随机的，只要固定不变就可以。同时最好是 private 和 final 的，尽量保证不变。</li><li>此外，序列化过程中不会保存 static 和 transient 修饰的属性，前者很好理解，因为静态属性是与类管理的，不属于对象状态；而后者则是 Java 的关键字，专门用来标识不序列化的属性。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171019-152303149.jpg" alt="@AS中设置提醒 |center "><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171019-152425922.jpg" alt="@如图，设置后，如果没有写会提示|center"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171019-152532106.jpg" alt="@如图|center"><br><strong>序列化与反序列化 Serializable</strong></li></ul><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 序列化对象</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">synchronized public static boolean saveObject(Object obj, String path) &#123;</span></span><br><span class="line"><span class="regexp">    if (obj == null) &#123;</span></span><br><span class="line"><span class="regexp">        return false;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    ObjectOutputStream oos = null;</span></span><br><span class="line"><span class="regexp">    try &#123;</span></span><br><span class="line"><span class="regexp">        oos = new ObjectOutputStream(new FileOutputStream(path));</span></span><br><span class="line"><span class="regexp">        oos.writeObject(obj);</span></span><br><span class="line"><span class="regexp">        oos.close();</span></span><br><span class="line"><span class="regexp">        return true;</span></span><br><span class="line"><span class="regexp">    &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="regexp">        e.printStackTrace();</span></span><br><span class="line"><span class="regexp">    &#125; finally &#123;</span></span><br><span class="line"><span class="regexp">        if (oos != null) &#123;</span></span><br><span class="line"><span class="regexp">            try &#123;</span></span><br><span class="line"><span class="regexp">                oos.close();</span></span><br><span class="line"><span class="regexp">            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="regexp">                e.printStackTrace();</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return false;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * 反序列化对象</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">@(Android 序列化)[Serializable]SuppressWarnings("unchecked ")</span></span><br><span class="line"><span class="regexp">synchronized public static &lt;T&gt; T readObject(String path) &#123;</span></span><br><span class="line"><span class="regexp">    ObjectInputStream ojs = null;</span></span><br><span class="line"><span class="regexp">    try &#123;</span></span><br><span class="line"><span class="regexp">        ojs = new ObjectInputStream(new FileInputStream(path));</span></span><br><span class="line"><span class="regexp">        return (T) ojs.readObject();</span></span><br><span class="line"><span class="regexp">    &#125; catch (IOException | ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="regexp">        e.printStackTrace();</span></span><br><span class="line"><span class="regexp">    &#125; finally &#123;</span></span><br><span class="line"><span class="regexp">        close(ojs);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return null;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>通过流的写入和读来完成。</p><h4 id="Parcelable-接口"><a href="#Parcelable-接口" class="headerlink" title="Parcelable 接口"></a>Parcelable 接口</h4><ul><li>Parcelable 是 Android 特有的序列化接口</li><li><p>实现了 Parcelable 接口的类在序列化和反序列化时会被转换为 Parcel 类型的数据 。</p><blockquote><p>Parcel 是一个载体，它可以包含数据或者对象引用，然后通过 IBinder 在进程间传递。</p></blockquote></li><li><p>实现 Parcelable 接口的类必须有一个 CREATOR 类型的静态变量</p></li></ul><h4 id="项目中遇到的Bean对象的静态内部类的Parcelable的问题。"><a href="#项目中遇到的Bean对象的静态内部类的Parcelable的问题。" class="headerlink" title="项目中遇到的Bean对象的静态内部类的Parcelable的问题。"></a>项目中遇到的Bean对象的静态内部类的Parcelable的问题。</h4><ol><li><p>串行化只能保存对象的<strong>非静态成员交量</strong>，<strong>不能保存任何的成员方法和静态的成员变量</strong>，而且串行化保存的只是变量的值，对于变量的<strong>任何修饰符都不能保存</strong>。<br>如果把Person类中的name定义为static类型的话，试图重构，就不能得到原来的值，只能得到null。说明对<strong>静态成员变量值是不保存</strong>的。这其实比较容易理解，<strong>序列化保存的是对象的状态，静态变量属于类的状态</strong>，因此 序列化并不保存静态变量。</p></li><li><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171019-163012162.jpg" alt="@如图|center"><br>想要序列化的每一个类都需要实现Parcelable的接口，由于PersonPerBean类中的类是内部类，属于类，不属于对象了就，所以传递值的时候，也需要传递。如下图也可以传递 对象的数组集合。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171019-163303201.jpg" alt="@内部静态类的传递需要实例化"><br>代码</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">PersonPerBean bean = new PersonPerBean();</span><br><span class="line">        bean.setReason(<span class="string">"测试"</span>);</span><br><span class="line">        PersonPerBean.ResultBean resultBean = new PersonPerBean.ResultBean();</span><br><span class="line">        resultBean.setStat(<span class="string">"100"</span>);</span><br><span class="line">        List&lt;PersonPerBean.ResultBean.DataBean&gt; listBean = new ArrayList&lt;&gt;();</span><br><span class="line">        PersonPerBean.ResultBean.DataBean dataBean = new PersonPerBean.ResultBean.DataBean();</span><br><span class="line">        dataBean.setUrl(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">        dataBean.setAuthor_name(<span class="string">"李彦宏"</span>);</span><br><span class="line">        PersonPerBean.ResultBean.DataBean dataBean1 = new PersonPerBean.ResultBean.DataBean();</span><br><span class="line">        dataBean1.setUrl(<span class="string">"www.wnagyi.com"</span>);</span><br><span class="line">        dataBean1.setAuthor_name(<span class="string">"丁磊"</span>);</span><br><span class="line">        listBean.add(dataBean);</span><br><span class="line">        listBean.add(dataBean1);</span><br><span class="line"></span><br><span class="line">        Intent intent = new Intent(SerializableActivity.this, GetSerializableActivity.<span class="keyword">class</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"bean"</span>, bean);</span><br><span class="line">        intent.putExtra(<span class="string">"resultBean"</span>,resultBean);</span><br><span class="line">        intent.putParcelableArrayListExtra(<span class="string">"listBean"</span>, (ArrayList&lt;? extends Parcelable&gt;) listBean);</span><br><span class="line">        startActivity(intent);</span><br></pre></td></tr></table></figure></li></ol><p>接受的代码为<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">bean = bundle.getParcelable(<span class="string">"bean"</span>);</span><br><span class="line">        resultBean = bundle.getParcelable(<span class="string">"resultBean"</span>);</span><br><span class="line">        mList = bundle.getParcelableArrayList(<span class="string">"listBean"</span>);</span><br><span class="line">        Log.i(<span class="string">"bean"</span>,bean.getReason()+<span class="string">"====="</span>+resultBean.getStat()+mList.get(<span class="number">0</span>).getUrl());</span><br></pre></td></tr></table></figure></p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171019-163604082.jpg" alt="@如图在另一个Activity中接受数据成功"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Android-序列化Serializable和Parcelable&quot;&gt;&lt;a href=&quot;#Android-序列化Serializable和Parcelable&quot; class=&quot;headerlink&quot; title=&quot;Android 序列化Serializable和Parcelable&quot;&gt;&lt;/a&gt;Android 序列化Serializable和Parcelable&lt;/h4&gt;
    
    </summary>
    
    
      <category term="序列化" scheme="http://www.999555yun.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>IVM虚拟机与Android虚拟机</title>
    <link href="http://www.999555yun.com/2018/01/25/IVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8EAndroid%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://www.999555yun.com/2018/01/25/IVM虚拟机与Android虚拟机/</id>
    <published>2018-01-25T14:50:03.000Z</published>
    <updated>2018-01-25T14:51:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java虚拟机和android-设备中的虚拟机"><a href="#Java虚拟机和android-设备中的虚拟机" class="headerlink" title="Java虚拟机和android 设备中的虚拟机"></a>Java虚拟机和android 设备中的虚拟机</h3><a id="more"></a><h4 id="jdk-、jvm、jre"><a href="#jdk-、jvm、jre" class="headerlink" title="jdk 、jvm、jre"></a>jdk 、jvm、jre</h4><ul><li>JDK 是 Java 开发工具包，如果你要开发 Java 程序，总得使用 Java 提供的 API 进行开发吧，JDK 就是我们开发 Java 程序的工具。</li><li>JDK 包含 JRE。JRE 是 Java 程序的运行时环境，也就是说，他是运行 Java 程序的一个环境。</li><li>我们都知道，Java 字节码的运行需要在 JVM 中完成，所以 JRE 必定包含一个 JVM(Java 虚拟机)。</li></ul><h4 id="主流的JAVA虚拟机"><a href="#主流的JAVA虚拟机" class="headerlink" title="主流的JAVA虚拟机"></a>主流的JAVA虚拟机</h4><ul><li>HotSpot VM</li><li>J9 VM</li><li>Zing VM</li></ul><p><strong>HotSpot</strong><br>HotSpot VM是绝对的主流。Oracle JDK、 Sun JDK、OpenJDK的各种变种（例如IcedTea、Zulu），用的都是相同核心的HotSpot VM。</p><p><strong>J9</strong><br>J9是IBM开发的一个高度模块化的JVM。<br>在许多平台上，IBM J9 VM都只能跟IBM产品一起使用。这不是技术限制，而是许可证限制。</p><p><strong>Zing</strong><br>Zing VM是一个从Sun HotSpot VM fork出来的一个高性能JVM，可以运行在Linux/x86-64平台上。Azul为它重新写了一套GC，也修改了VM内的许多实现细节，所以从我们自己的角度看，与其说它是HotSpot VM的一个变种，还不如把它看作“一个全新的JVM、只是凑巧与HotSpot VM很像”更合适。</p><h4 id="Java-虚拟机与-Dalvik-虚拟机的关系"><a href="#Java-虚拟机与-Dalvik-虚拟机的关系" class="headerlink" title="Java 虚拟机与 Dalvik 虚拟机的关系"></a>Java 虚拟机与 Dalvik 虚拟机的关系</h4><blockquote><p>由于 Androd 运行在移动设备上，内存以及电量等诸多方面跟一般的 PC 设备都有本质的区别 ，一般的 JVM 没法满足移动设备的要求，所以在开发 Android 过程中，Android 团队一开始就必须打造一个符合移动设备的可以执行 Java 代码的虚拟机。</p></blockquote><h5 id="JVM-与-Dalvik-的区别"><a href="#JVM-与-Dalvik-的区别" class="headerlink" title="JVM 与 Dalvik 的区别"></a>JVM 与 Dalvik 的区别</h5><blockquote><p>到这里你会发现，其实 Dalvik 是一个更符合移动设备的用于执行 Java 代码的虚拟机，但又不是一个严格按照 JVM 规范的虚拟机实现，下面分别从执行文件格式等其他方面介绍一下他们的区别。</p><ol><li>Dalvik： Dalvik是Google公司自己设计用于Android平台的Java虚拟机它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种压缩格式，适合内存和处理器速度有限的系统。执行的是字节码，它是依靠Just-In-Time (JIT)机制去解释字节码</li><li>ART：即Android Runtime，google为了替代Dalvik专门为Android研发的。Android KK为开发者推出，L版本正式上线。比替代品更高效省电，执行的是本地机器码，依靠Ahead-Of-Time (AOT)机制<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171130-142227447.png" alt="@如图|center|500*0"></li><li><strong>格式</strong><br>JVM 可以执行的文件是 .class 结尾的字节码文件，而 Dalvik 执行的是 dex 文件。</li></ol></blockquote><p> 但是按照 JVM 的规范，虚拟机只能执行 .class 文件，所以这里也印证上面抛出的那个结论，Dalvik 并不是一个符合 JVM 规范的 Java 虚拟机。</p><p> 为什么 Dalvik 执行 dex 文件而不是 .class 文件，其实这里是 Android 专为 Dalvik 虚拟机做的一个优化。</p><p> Java 虚拟机执行 .class 格式的字节码。每一个 Java 文件对应一个 .class 的字节码文件，JVM 在运行时为每一个执行到的类装载字节码。而 Android 设备上为了提高执行效率，在编译 Android 项目时，Android 通过 SDK 提供的工具 dex.jar 会把所有的 .class 文件最终打包成一个 .dex 文件(不一定是一个)。</p><ol start="2"><li><p><strong>Base</strong><br>Dalvik 基于寄存器，而 JVM 基于栈，很明显，基于寄存器的 Dalvik 在速度方面优势会更明显。</p></li><li><p><strong>运行环境</strong><br>Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个 Dalvik 应用作为一个独立的 Linux 进程执行。</p><p>独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。<br>除了上面提到的，还有以下几点。</p><ul><li>Dalvik负责进程隔离和线程管理，每一个Android应用在底层都会对应一个独立的Dalvik虚拟机实例，其代码在虚拟机的解释下得以执行。</li></ul></li></ol><ul><li>dex 文件格式可以减少整体文件尺寸，提高I/O操作的类查找速度。</li><li>有一个特殊的虚拟机进程Zygote，他是虚拟机实例的孵化器。它在系统启动的时候就会产生，它会完成虚拟机的初始化、库的加载、预制类库和初始化的操作。如果系统需要一个新的虚拟机实例，它会迅速复制自身，以最快的速度提供给系统。</li></ul><h4 id="Dalivk-与-ART-虚拟机"><a href="#Dalivk-与-ART-虚拟机" class="headerlink" title="Dalivk 与 ART 虚拟机"></a>Dalivk 与 ART 虚拟机</h4><blockquote><p>从 Android L 开始，Android 开始启用了新设计的虚拟机 ART。与 Dalvik 不同，在Dalvik下，应用每次运行的时候，字节码都需要通过即时编译器（Just In Time ，JIT）转换为本地机器码，这会拖慢应用的运行效率。</p></blockquote><p>而在ART 环境中，应用在第一次安装的时候，会使用设备上的dex2oat 工具进行字节码转码，把字节码预先编译成本地机器码，使其成为真正的本地应用。这个过程叫做预编译（Ahead-Of-Time，AOT）。<br>采用 AOT 策略后的好处显而易见，应用的启动速度会因此快很多，但是与此同时，应用的安装时间就会因为执行 AOT 操作而变长，但是相比之下还是非常值得。</p><p>另外，ART的另一个缺点就是对存储空间占用变大。一般的字节码在编译转码后占用的空间大小比之前要增大10%-20%。</p><p>除了 AOT 机制，ART 另外一个显著的提升就是垃圾回收方面的提升。相比 Dalvik 虚拟机，ART 虚拟机具有更高的回收性能。具体可以查看知乎的一个同学的回答，或者可以直接看官方的文档说明。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Dalvik 其实可以理解为一个专为移动设备优化过的 JVM，它的大部分地方都遵守了 JVM 规范，其实那些不符合规范的地方，就可以理解为为移动设备做的优化工作。而 ART 是一个具有更高性能的 Android 虚拟机，从一开始他就是为取代 Dalvik 而来，它的 AOT 机制相比Dalvik 的 JIT 机制使得应用有更快的启动速度。同时 ART 虚拟机在垃圾回收方面也比 Dalvik 更加高性能。</p><h4 id="附"><a href="#附" class="headerlink" title="附"></a>附</h4><p><strong>JIT</strong>    Dalvik 虚拟机运行 App 的机制，运行期实时翻译（Just In Time）。</p><p><strong>AOT</strong>  ART 虚拟机对 App 运行的优化机制，它在应用安装时就提前（Ahead-Of-Time）做好了字节码到机器码的翻译工作。</p><h4 id="Improved-garbage-collection"><a href="#Improved-garbage-collection" class="headerlink" title="Improved garbage collection"></a>Improved garbage collection</h4><p>首先介绍下dalvik的gc的过程.主要有有四个过程</p><ol><li>当gc被触发时候,其会去查找所有活动的对象,这个时候整个程序与虚拟机内部的所有线程就会挂起,这样目的是在较少的堆栈里找到所引用的对象.需要注意的是这个回收动作是和应用程序同时执行(<strong>非并发</strong>).</li><li>gc对符合条件的对象进行标记</li><li>gc对标记的对象进行回收</li><li>恢复所有线程的执行现场继续运行<br><strong>dalvik这么做的好处是,当pause了之后,gc势必是相当快速的.但是如果出现gc频繁并且内存吃紧势必会导致ui卡顿,掉帧.操作不流畅等</strong></li></ol><p>后来art改善了这种gc方式(也是想对ui流畅度做贡献,当然关于ui流畅,5.0以上了新的并行ui线程),主要的改善点在将其非并发过程改变成了部分并发.还有就是对内存的重新分配管理当art gc发生时</p><ol><li>gc将会锁住java堆,扫描并进行标记</li><li>标记完毕释放掉java堆的锁,并且挂起所有线程</li><li>gc对标记的对象进行回收</li><li>恢复所有线程的执行现场继续运行</li><li>重复2-4直到结束可以看出整个过程做到了部分并发使得时间缩短.据官方测试数据说gc效率提高2倍</li></ol><h4 id="Improved-memory-usage-and-reduce-fragmentation"><a href="#Improved-memory-usage-and-reduce-fragmentation" class="headerlink" title="Improved memory usage and reduce fragmentation"></a>Improved memory usage and reduce fragmentation</h4><p>官方把这一点合并到了Improved garbage collection这个主题中讲,原因也是和gc有很大关系可以对比一下两个虚拟机的内存分配的规则,首先是dalvik.他的内存管理特点是:内存碎片化严重,当然这也是Mark and Sweep算法带来的弊端<br>该算法如图(》<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171130-135035688.jpg" alt="@图片来自《深入理解jvm》|center|400*0"></p><p>可以看出每次gc后内存千疮百孔,本来连续分配的内存块变得碎片化严重,之后再分配进入的对象再进行内存寻址变得困难art的解决:在art中,它将java分了一块空间命名为Large-Object-Space,这块内存空间的引入用来专门存放large object.同时art又引入了moving collector的技术,即将不连续的物理内存块进行对齐.对齐了后内存碎片化就得到了很好的解决.Large-Object-Space的引入一是因为moving collector对大块内存的位移时间成本太高,而且提高内存的利用率根官方统计，art的内存利用率提高10倍了左右</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java虚拟机和android-设备中的虚拟机&quot;&gt;&lt;a href=&quot;#Java虚拟机和android-设备中的虚拟机&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机和android 设备中的虚拟机&quot;&gt;&lt;/a&gt;Java虚拟机和android 设备中的虚拟机&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout 协调布局</title>
    <link href="http://www.999555yun.com/2018/01/24/CoordinatorLayout-%E5%8D%8F%E8%B0%83%E5%B8%83%E5%B1%80/"/>
    <id>http://www.999555yun.com/2018/01/24/CoordinatorLayout-协调布局/</id>
    <published>2018-01-24T13:12:09.000Z</published>
    <updated>2018-01-24T14:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="协调布局（CoordinatorLayout）"><a href="#协调布局（CoordinatorLayout）" class="headerlink" title="协调布局（CoordinatorLayout）"></a>协调布局（CoordinatorLayout）</h3><a id="more"></a><blockquote><p>Android 5.0新控件 CoordinatorLayout (协调布局 )</p><ol><li>作为顶层布局<br>调度和协调子布局</li></ol></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><blockquote><p>由于 <code>CoordinatorLayout</code>来自design  兼容包。需要在Model的build.gradle中添加依赖。 <code>compile &#39;com.android.support:design:25.3.1&#39;</code></p></blockquote><ol><li><strong>和AppBarLayout一起使用的5中效果</strong><br>首先AppBarLayout的子view要使用layout_scrollFlags 属性，5种值。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20180124-170901728.jpg" alt="@可选择值|center|400*0"><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout <span class="symbol">xmlns:</span>android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="symbol">xmlns:</span>app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="symbol">android:</span>id=<span class="string">"@+id/drawer_coordinator"</span></span><br><span class="line">    <span class="symbol">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="symbol">android:</span>layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        <span class="symbol">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="symbol">android:</span>layout_height=<span class="string">"wrap_content"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.v7.widget.Toolbar</span><br><span class="line">            <span class="symbol">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            <span class="symbol">android:</span>layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">            <span class="symbol">android:</span>background=<span class="string">"?attr/colorPrimary"</span></span><br><span class="line">            <span class="symbol">android:</span>theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span><br><span class="line">            <span class="symbol">app:</span>layout_scrollFlags=<span class="string">"scroll|snap"</span></span><br><span class="line">            <span class="symbol">app:</span>popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/android.support.v7.widget.Toolbar&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/android</span>.support.design.widget.AppBarLayout&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        <span class="symbol">android:</span>id=<span class="string">"@+id/homepage_rc"</span></span><br><span class="line">        <span class="symbol">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="symbol">android:</span>layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="symbol">app:</span>layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/android.support.v7.widget.RecyclerView&gt;</span></span><br><span class="line"><span class="regexp">&lt;/android</span>.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180124-170944680.jpg" alt="@如图xml布局|center|400*0"></p><p>我们吧AppBarLayout里面的View叫做子view，下面滚动的RecyclerView成为ScrollView</p><ul><li><strong>scroll</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="symbol">app:</span>layout_scrollFlags=<span class="string">"scroll|enterAlways|enterAlwaysCollapsed"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>效果图<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20180124-173600396.gif" alt="@如图|center|200*320"></p><p>当<strong>向上</strong>滑动的时候，<strong>子view</strong> 会首先消失。然后是scrollview向上滑动。<br>当<strong>向下</strong>胡滑动的时候，scrollview所有的view都显示后，子view才会最后出来。</p><ul><li><strong>scroll</strong> | <strong>enterAlways</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="symbol">app:</span>layout_scrollFlags=<span class="string">"scroll|enterAlways"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>效果图<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20180124-181358523.gif" alt="@如图|center|200*320"></p><p>这种效果和scroll 的区别是，向上滑动的时候一样。<br>向下滑动的时候，子view会先于scroolview全部滑动出来。</p><ul><li><strong>scroll | enterAlways | enterAlwaysCollapsed</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="symbol">android:</span>minHeight=<span class="string">"50dp"</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">app:</span>layout_scrollFlags=<span class="string">"scroll|enterAlways|enterAlwaysCollapsed"</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">"match_parent"</span>  </span><br><span class="line"></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">"100dp"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>效果图<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20180124-182217721.gif" alt="@如图|center|200*320"><br>向上滑动同上两个一样。<br>向下滑动的时候，appbarlayout中的view会先滑动设定的最小的距离，然后等下面的scrollview滑动结束了，再继续滑动。</p><ul><li><strong>scroll</strong> | <strong>exitUntilCollapsed</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">android:</span>minHeight=<span class="string">"50dp"</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">app:</span>layout_scrollFlags=<span class="string">"scroll|exitUntilCollapsed"</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            </span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">"100dp"</span></span><br></pre></td></tr></table></figure></li></ul><p>效果图</p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180124-182953199.gif" alt="@如图|center|200*320"><br>向上滑动的时候，会显示设置的子view 的50dp的距离在外面，然后下面的scrollview再滑动。<br>向下滑动的时候，scrollview全部显示后，隐藏的子view的50dp才滑出来。</p><ul><li><strong>scroll</strong> | <strong>snap</strong></li></ul><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">app:</span>layout_scrollFlags=<span class="string">"scroll|snap"</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            </span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">"100dp"</span></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180124-183753152.gif" alt="@如图|center|200*320"></p><p>如果向上滑动超过一半，则子view全部隐藏。<br>如果向下滑动子view的一半，则全部显示。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;协调布局（CoordinatorLayout）&quot;&gt;&lt;a href=&quot;#协调布局（CoordinatorLayout）&quot; class=&quot;headerlink&quot; title=&quot;协调布局（CoordinatorLayout）&quot;&gt;&lt;/a&gt;协调布局（CoordinatorLayout）&lt;/h3&gt;
    
    </summary>
    
    
      <category term="CoordinatorLayout" scheme="http://www.999555yun.com/tags/CoordinatorLayout/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机学习(1)</title>
    <link href="http://www.999555yun.com/2018/01/19/Java-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://www.999555yun.com/2018/01/19/Java-虚拟机学习-1/</id>
    <published>2018-01-19T06:04:45.000Z</published>
    <updated>2018-01-19T06:21:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h4><a id="more"></a><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180119-112619553.jpg" alt="@JDK JRE JVM关系|center|400*0"></p><ol><li><p><strong>Java 开发工具包 (JDK)</strong><br>Java开发工具包是Java环境的核心组件，并提供编译、调试和运行一个Java程序所需的所有工具，可执行文件和二进制文件。JDK是一个平台特定的软件，有针对Windows，Mac和Unix系统的不同的安装包。可以说JDK是JRE的超集，它包含了JRE的Java编译器，调试器和核心类。目前JDK的版本号是1.7，也被称为Java 7。</p></li><li><p><strong>Java虚拟机(JVM)</strong><br>JVM是Java编程语言的核心。当我们运行一个程序时，JVM负责将字节码转换为特定机器代码。JVM也是平台特定的，并提供核心的Java方法，例如内存管理、垃圾回收和安全机制等。JVM 是可定制化的，我们可以通过Java 选项(java options)定制它，比如配置JVM 内存的上下界。JVM之所以被称为虚拟的是因为它提供了一个不依赖于底层操作系统和机器硬件的接口。这种独立于硬件和操作系统的特性正是Java程序可以一次编写多处执行的原因。</p></li><li><p><strong>Java运行时环境(JRE)</strong><br>JRE是JVM的实施实现，它提供了运行Java程序的平台。JRE包含了JVM、Java二进制文件和其它成功执行程序的类文件。JRE不包含任何像Java编译器、调试器之类的开发工具。如果你只是想要执行Java程序，你只需安装JRE即可，没有安装JDK的必要。</p></li><li><p><strong>JDK, JRE 和JVM的区别</strong><br>JDK是用于开发的而JRE是用于运行Java程序的。<br>JDK和JRE都包含了JVM，从而使得我们可以运行Java程序。<br>JVM是Java编程语言的核心并且具有平台独立性。</p></li><li><strong>即时编译器(JIT)</strong><br>有时我们会听到JIT这个概念，并说它是JVM的一部分，这让我们很困惑。JIT是JVM的一部分，它可以在同一时间编译类似的字节码来优化将字节码转换为机器特定语言的过程相似的字节码，从而将优化字节码转换为机器特定语言的过程，这样减少转换过程所需要花费的时间</li></ol><h4 id="Java-技术体系"><a href="#Java-技术体系" class="headerlink" title="Java 技术体系"></a>Java 技术体系</h4><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180119-091811156.jpg" alt="@Java 技术体系|center|400*0"><br><strong>Java技术体系平台</strong></p><ul><li>Java Card：支持一些Java小程序（Applets）运行在小内存设备（如智能卡）上的平台。</li><li>Java ME（Micro Edition）：支持Java程序运行在移动终端（手机、PDA）上的平台，对 Java API 有所精简，并加入了针对移动终端的支持，这个版本以前称为J2ME。</li><li>Java SE（Standard Edition）：支持面向桌面级应用（如 Windows 下的应用程序）的 Java 平台，提供了完整的 Java 核心 API，这个版本以前称为 J2SE。</li><li>Java EE（Enterprise Edition）：支持使用多层架构的企业应用（如 ERP、CRM 应用）的 Java 平台，除了提供 Java SE API 外，还对其做了大量的扩充并提供了相关的部署支持，这个版本以前称为 J2EE。</li></ul><p><strong>JVM 自身的物理结构</strong><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20180119-092058295.jpg" alt="@JVM物理结构|center|400*0"><br> Java <strong>编译器</strong>和 <strong>os 平台</strong>之间的虚拟处理器。它是一种<strong>基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机</strong>，可以在上面执行 Java 的字节码程序。</p><p><strong>Java 编译器只需面向 JVM，生成 JVM 能理解的代码或字节码文件。Java 源文件经编译器，编译成字节码程序，通过 JVM 将每一条指令翻译成不同平台机器码，通过特定平台运行。</strong></p><p>简单的说，JVM 就相当于一台柴油机,它只能用 Java (柴油)运行,JVM 就是 Java 的虚拟机,有了 JVM 才能运行 Java 程序</p><h4 id="Java代码编译和执行过程"><a href="#Java代码编译和执行过程" class="headerlink" title="Java代码编译和执行过程"></a>Java代码编译和执行过程</h4><p>Java代码编译是有Java 源码编译器来完成，流程图如下所示</p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180119-094357481.jpg" alt="Java 编译器流程|center|400*0"></p><p>Java 字节码的执行是由 JVM 执行引擎来完成，流程图如下所示</p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180119-105420864.jpg" alt="@字节码的执行流程|center|400*0"></p><ul><li><p><strong>Java 代码编译和执行</strong>的整个过程包含了以下三个重要的机制</p><ol><li>Java 源码编译机制</li><li>类加载机制</li><li>类执行机制</li></ol></li><li><p>Java 源码编译机制</p><ol><li>分析和输入到符号表</li><li>注解处理</li><li>语义分析和生成 class 文件</li></ol></li><li><p>最后生成的 <strong>class 文件</strong>由以下部分组成</p><ol><li>结构信息。包括 class 文件格式版本号及各部分的数量与大小的信息。</li><li>元数据。对应于 Java 源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池。</li><li>方法信息。对应 Java 源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息。</li></ol></li></ul><h4 id="JVM-的类加载"><a href="#JVM-的类加载" class="headerlink" title="JVM 的类加载"></a>JVM 的类加载</h4><blockquote><p>JVM 的类加载是通过 ClassLoader 及其子类来完成的，类的层次关系和加载顺序可以由下图来描述</p></blockquote><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20180119-113957481.jpg" alt="@JVM类加载"></p><ol><li><p><strong>Bootstrap ClassLoader</strong><br>负责加载$JAVA_HOME中jre/lib/rt.jar里所有的 class，由 C++ 实现，不是 ClassLoader 子类。</p></li><li><p><strong>Extension ClassLoader</strong><br>负责加载Java平台中扩展功能的一些 jar 包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的 jar 包。</p></li><li><p><strong>App ClassLoader</strong><br>负责记载 classpath 中指定的 jar 包及目录中 class。</p></li><li><p><strong>Custom ClassLoader</strong><br>属于应用程序根据自身需要自定义的 ClassLoader，如 Tomcat、jboss 都会根据 J2EE 规范自行实现 ClassLoader。</p><p>加载过程中会先检查类是否被已加载，检查顺序是自底向上，从 Custom ClassLoader 到 BootStrap ClassLoader 逐层检查，只要某个 Classloader 已加载就视为已加载此类，保证此类只所有 ClassLoade r加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</p></li></ol><p> <strong>类执行机制</strong></p><p> JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。栈的结构如下图所示：<br> <img src="http://omflg86rs.bkt.clouddn.com/blog/20180119-114552538.jpg" alt="@栈帧|center|200*0"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JDK-JRE-JVM&quot;&gt;&lt;a href=&quot;#JDK-JRE-JVM&quot; class=&quot;headerlink&quot; title=&quot;JDK JRE JVM&quot;&gt;&lt;/a&gt;JDK JRE JVM&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.999555yun.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>性能优化（内存）</title>
    <link href="http://www.999555yun.com/2017/11/26/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E5%86%85%E5%AD%98%EF%BC%89/"/>
    <id>http://www.999555yun.com/2017/11/26/性能优化（内存）/</id>
    <published>2017-11-26T12:43:14.000Z</published>
    <updated>2018-01-26T06:43:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="性能优化（内存泄露及优化）"><a href="#性能优化（内存泄露及优化）" class="headerlink" title="性能优化（内存泄露及优化）"></a>性能优化（内存泄露及优化）</h3><a id="more"></a><p>@(Android 系统架构)</p><h4 id="什么是内存泄露？"><a href="#什么是内存泄露？" class="headerlink" title="什么是内存泄露？"></a>什么是内存泄露？</h4><ol><li>内存不在GC回收的掌控之内了。<blockquote><p>存在几个问题</p></blockquote></li></ol><ul><li>什么是垃圾回收机制—GC？<ol><li>吃完了自己去吧垃圾倒掉。c语言 –手动回收内存</li><li>直接吃完走人，服务员回收掉餐具。吃饭的方式比较爽。—GC（java）。</li></ol></li><li><p>服务员怎么知道什么时候回收那个餐具那？</p><ol><li>回收的标准低—&gt;只要客户不走—&gt;持有餐具就不回收。</li><li>GC会找到合适的时机，一次性的回收很多。<br>占着茅坑不拉屎，坚决抵制，服务员只能按照原则办事，他搞不定。这个需要素质——-&gt;就是开发者的素质。<br><strong>总结</strong> -  某个对象不在有任何引用的时候才会进行垃圾回收。</li><li><strong>提问</strong> 反过来如果是某个对象被倍的对象引用了，就不能被回收吗？<strong>答案</strong> 否。（1）有软引用、若引用、虚引用。（2）最终的回答–&gt;该对象一直往上追溯引用，能追溯到GCroot。不可以回收。Tracing算法。</li><li><img src="./1494508003954.png" alt="@如图"></li></ol><hr></li></ul><h4 id="可以作为GC-root-引用点的是？"><a href="#可以作为GC-root-引用点的是？" class="headerlink" title="可以作为GC root 引用点的是？"></a>可以作为GC root 引用点的是？</h4><p><img src="./1494508479186.png" alt="@ jvm 结构"></p><p><img src="./1494508575487.png" alt="@方法区"><br><strong>Gc 主要负责堆内存</strong></p><ol><li>内存有那些？</li></ol><ul><li><p>数据区—&gt; 方法区、堆内存、栈。<br><strong>可以作为GC root 引用点的是</strong><br>   （1）javaStack 中的引用的对象。<br>   （2）方法区中静态的引用指向的对象。<br>   （3）方法区中常量引用指向的对象。<br>   （4）Thread— 或者的线程。</p><hr></li></ul><ol start="2"><li><strong>怎么判断是垃圾的对象</strong></li></ol><ul><li>GC可以检测到。</li><li>主观的。</li><li>OOM内存溢出。（泄露太多，某一次大的内存使用，但是内存不够了）。</li></ul><hr><ol start="3"><li><strong>确定项目中是否有内存泄露</strong></li></ol><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;性能优化（内存泄露及优化）&quot;&gt;&lt;a href=&quot;#性能优化（内存泄露及优化）&quot; class=&quot;headerlink&quot; title=&quot;性能优化（内存泄露及优化）&quot;&gt;&lt;/a&gt;性能优化（内存泄露及优化）&lt;/h3&gt;
    
    </summary>
    
    
      <category term="性能优化" scheme="http://www.999555yun.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PercentageCircle （显示百分比）控件</title>
    <link href="http://www.999555yun.com/2017/11/03/PercentageCircle-%EF%BC%88%E6%98%BE%E7%A4%BA%E7%99%BE%E5%88%86%E6%AF%94%EF%BC%89%E6%8E%A7%E4%BB%B6/"/>
    <id>http://www.999555yun.com/2017/11/03/PercentageCircle-（显示百分比）控件/</id>
    <published>2017-11-03T04:26:47.000Z</published>
    <updated>2017-11-06T01:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PercentageCircle-（显示百分比）控件"><a href="#PercentageCircle-（显示百分比）控件" class="headerlink" title="PercentageCircle （显示百分比）控件"></a>PercentageCircle （显示百分比）控件</h3><a id="more"></a><blockquote><p>项目中需要同步硬件设备的数据，显示大概百分比和实时数据。自定义的控件。</p></blockquote><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171101-170520988.jpg" alt="@效果图|center|160*260"></p><ul><li>用户目前数量。</li><li>设置单位。</li><li>根据颜色来判断目前所占总数的大概百分比。</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><strong>项目中使用</strong><br>可以在<strong>代码</strong>或<strong>xml</strong>中设置 当前数目和背景的颜色，当前<strong>数目</strong>和<strong>单位</strong>的<strong>字体</strong>，<strong>颜色</strong>，<strong>大小</strong>。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171101-170059997.jpg" alt="@如图xml|center|300*150"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171101-171709629.jpg" alt="@代码中|center|300*250"></li></ol><p>使用简单，可以直接在xml中或者动态代码中设置对应的属性，代码中设置的属性会覆盖xml中的属性。</p><h4 id="功能的设计"><a href="#功能的设计" class="headerlink" title="功能的设计"></a>功能的设计</h4><ol><li><p>按照要求宽和高相同onMeasure的代码</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/测量控件的大小，以为是一个圆，所以用最小的数字作为他们的直径的长度。</span></span><br><span class="line"><span class="regexp">    @Override</span></span><br><span class="line"><span class="regexp">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span></span><br><span class="line"><span class="regexp">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line"><span class="regexp">        int size = Math.min(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec));</span></span><br><span class="line"><span class="regexp">        setMeasuredDimension(size, size);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>绘制<strong>onDraw</strong>()，<strong>一条直线</strong>，然后去<strong>旋转</strong></p></li></ol><hr><ul><li><strong>画直线</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">canvas.drawLine(getWidth() / <span class="number">2</span>, <span class="number">0</span>, getWidth() / <span class="number">2</span>, mLineLength, mPaint);</span><br></pre></td></tr></table></figure></li></ul><p>起始点为（width/2，0）就是控件的中心点的正上方，坐标的-90°位置。</p><ul><li><strong>旋转</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">canvas.rotate(mDrgees, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul><p>以控件的中心点为原点，以设定的角度去旋转，在for中循环执行。</p><ul><li><p><strong>颜色</strong><br>占有百分比和背景颜色，在for循环前设定。如下代码</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/设置未被选中的直线的颜色。</span></span><br><span class="line"><span class="regexp">       mPaint.setColor(mUnSelectColor);</span></span><br><span class="line"><span class="regexp">        for (int i = 0; i &lt; mSumLine - mSelectLine; i++) &#123;</span></span><br><span class="line"><span class="regexp">            canvas.drawLine(getWidth() /</span> <span class="number">2</span>, <span class="number">0</span>, getWidth() / <span class="number">2</span>, mLineLength, mPaint);</span><br><span class="line">            canvas.rotate(mDrgees, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        /<span class="regexp">/设置数量字体的颜色</span></span><br><span class="line"><span class="regexp">        mPaint.setColor(mNumColor);</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(mNumShow)) &#123;</span></span><br><span class="line"><span class="regexp">            mPaint.setTextSize(mNumTextSize);</span></span><br><span class="line"><span class="regexp">            mPaint.getTextBounds(mNumShow, 0, mNumShow.length(), mNumShowRect);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>字体</strong><br>设定字体的颜色，和范围。</p></li></ul><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/设置数量字体的颜色</span></span><br><span class="line"><span class="regexp">        mPaint.setColor(mNumColor);</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(mNumShow)) &#123;</span></span><br><span class="line"><span class="regexp">            mPaint.setTextSize(mNumTextSize);</span></span><br><span class="line"><span class="regexp">            mPaint.getTextBounds(mNumShow, 0, mNumShow.length(), mNumShowRect);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if(!TextUtils.isEmpty(mNumShow))&#123;</span></span><br><span class="line"><span class="regexp">            canvas.drawText(mNumShow, (getWidth() /</span> <span class="number">2</span> - mNumShowRect.width() / <span class="number">2</span>), (getHeight() / <span class="number">2</span> + mNumShowRect.height() / <span class="number">2</span>)</span><br><span class="line">                    , mPaint);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>以上就是主要的代码实现。主要就是ondraw()中代码的实现。</p><h4 id="属性和样式"><a href="#属性和样式" class="headerlink" title="属性和样式"></a>属性和样式</h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:right">对应变量</th><th style="text-align:center">类型</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:left">选中直线颜色</td><td style="text-align:right">select_color</td><td style="text-align:center">color</td><td style="text-align:center">Color.BLUE</td></tr><tr><td style="text-align:left">未选中直线颜色</td><td style="text-align:right">select_color</td><td style="text-align:center">color</td><td style="text-align:center">Color.GRAY</td></tr><tr><td style="text-align:left">数量字体颜色</td><td style="text-align:right">num_color</td><td style="text-align:center">color</td><td style="text-align:center">Color.BLACK</td></tr><tr><td style="text-align:left">单位字体颜色</td><td style="text-align:right">unit_color</td><td style="text-align:center">color</td><td style="text-align:center">Color.BLACK</td></tr><tr><td style="text-align:left">数量文字</td><td style="text-align:right">num_text</td><td style="text-align:center">String</td><td style="text-align:center">–</td></tr><tr><td style="text-align:left">单位文字</td><td style="text-align:right">unit_text</td><td style="text-align:center">String</td><td style="text-align:center">–</td></tr><tr><td style="text-align:left">数量文字大小</td><td style="text-align:right">num_text_size</td><td style="text-align:center">dimension</td><td style="text-align:center">30px</td></tr><tr><td style="text-align:left">数量文字大小</td><td style="text-align:right">unit_text_size</td><td style="text-align:center">dimension</td><td style="text-align:center">18px</td></tr><tr><td style="text-align:left">总直线数目</td><td style="text-align:right">all_line_num</td><td style="text-align:center">integer</td><td style="text-align:center">36</td></tr><tr><td style="text-align:left">直线长度</td><td style="text-align:right">line_height</td><td style="text-align:center">dimension</td><td style="text-align:center">10px</td></tr><tr><td style="text-align:left">直线宽度</td><td style="text-align:right">line_width</td><td style="text-align:center">dimension</td><td style="text-align:center">2px</td></tr></tbody></table><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><ol><li><p><strong>控件代码</strong></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PercentageCircle</span> <span class="title">extends</span> <span class="title">View</span> &#123;</span></span><br><span class="line">    /<span class="regexp">/初始化画笔</span></span><br><span class="line"><span class="regexp">    private Paint mPaint;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置没有被选中的颜色。</span></span><br><span class="line"><span class="regexp">    private int mSelectColor;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置选中后的颜色。</span></span><br><span class="line"><span class="regexp">    private int mUnSelectColor;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置数字的颜色</span></span><br><span class="line"><span class="regexp">    private int mNumColor;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置单位的颜色</span></span><br><span class="line"><span class="regexp">    private int mUnitColor;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置单位字体的大小。</span></span><br><span class="line"><span class="regexp">    private float mUnitTextSize;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置数目字体的大小。</span></span><br><span class="line"><span class="regexp">    private float mNumTextSize;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/总的数目</span></span><br><span class="line"><span class="regexp">    private int mSumLine;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/旋转的角度</span></span><br><span class="line"><span class="regexp">    private float mDrgees;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/dp转换为px。。line的长度</span></span><br><span class="line"><span class="regexp">    private float mLineLength;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/line的宽度。</span></span><br><span class="line"><span class="regexp">    private float mLineWidth;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/初始化被选中的数目</span></span><br><span class="line"><span class="regexp">    private int mSelectLine = 0;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置控件的单位</span></span><br><span class="line"><span class="regexp">    private String mUnit;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置控件的单位</span></span><br><span class="line"><span class="regexp">    private String mNumShow;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置字体的范围</span></span><br><span class="line"><span class="regexp">    private Rect mUnitRect;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置字体的范围</span></span><br><span class="line"><span class="regexp">    private Rect mNumShowRect;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    public PercentageCircle(Context context) &#123;</span></span><br><span class="line"><span class="regexp">        this(context, null);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    public PercentageCircle(Context context, AttributeSet attrs) &#123;</span></span><br><span class="line"><span class="regexp">        this(context, attrs, 0);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    public PercentageCircle(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span></span><br><span class="line"><span class="regexp">        super(context, attrs, defStyleAttr);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/属性集合</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.PercentageCircle);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置没被选中的默认的颜色为灰色。</span></span><br><span class="line"><span class="regexp">        mUnSelectColor = array.getColor(R.styleable.PercentageCircle_unselect_color, Color.GRAY);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置默认被选中的颜色为蓝色。</span></span><br><span class="line"><span class="regexp">        mSelectColor = array.getColor(R.styleable.PercentageCircle_select_color, Color.BLUE);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置字体和单位的默认的颜色为灰色。</span></span><br><span class="line"><span class="regexp">        mNumColor = array.getColor(R.styleable.PercentageCircle_num_color, Color.BLACK);</span></span><br><span class="line"><span class="regexp">        mUnitColor = array.getColor(R.styleable.PercentageCircle_unit_color, Color.BLACK);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置字体的大小和默认值</span></span><br><span class="line"><span class="regexp">        mUnitTextSize = array.getDimensionPixelOffset(R.styleable.PercentageCircle_unit_text_size, (int) dp2px(18));</span></span><br><span class="line"><span class="regexp">        mNumTextSize = array.getDimensionPixelOffset(R.styleable.PercentageCircle_num_text_size, (int) dp2px(30));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置总的数目</span></span><br><span class="line"><span class="regexp">        mSumLine = array.getInt(R.styleable.PercentageCircle_all_line_num, 36);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/单位的文本</span></span><br><span class="line"><span class="regexp">        mUnit = array.getString(R.styleable.PercentageCircle_unit_text);</span></span><br><span class="line"><span class="regexp">        mNumShow = array.getString(R.styleable.PercentageCircle_num_text);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置直线的宽度</span></span><br><span class="line"><span class="regexp">        mLineWidth = array.getDimensionPixelOffset(R.styleable.PercentageCircle_line_width, (int) dp2px(2));</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/长度</span></span><br><span class="line"><span class="regexp">        mLineLength = array.getDimensionPixelOffset(R.styleable.PercentageCircle_line_length, (int) dp2px(10));</span></span><br><span class="line"><span class="regexp">        array.recycle();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/实例化画笔</span></span><br><span class="line"><span class="regexp">        mPaint = new Paint();</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/抗锯齿</span></span><br><span class="line"><span class="regexp">        mPaint.setAntiAlias(true);</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置宽度</span></span><br><span class="line"><span class="regexp">        mPaint.setStrokeWidth(mLineWidth);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置数目字体的范围，用来得到 字体的宽和高。</span></span><br><span class="line"><span class="regexp">        mNumShowRect = new Rect();</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置单位字体的范围。</span></span><br><span class="line"><span class="regexp">        mUnitRect = new Rect();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/测量控件的大小，以为是一个圆，所以用最小的数字作为他们的直径的长度。</span></span><br><span class="line"><span class="regexp">    @Override</span></span><br><span class="line"><span class="regexp">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span></span><br><span class="line"><span class="regexp">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line"><span class="regexp">        int size = Math.min(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec));</span></span><br><span class="line"><span class="regexp">        setMeasuredDimension(size, size);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/绘制控件</span></span><br><span class="line"><span class="regexp">    @Override</span></span><br><span class="line"><span class="regexp">    protected void onDraw(Canvas canvas) &#123;</span></span><br><span class="line"><span class="regexp">        super.onDraw(canvas);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置每个间隔的旋转的角度.等于360/</span>总数目的个数。</span><br><span class="line">        mDrgees = <span class="number">360</span> / mSumLine;</span><br><span class="line">        Log.i(<span class="string">"111"</span>, mDrgees + <span class="string">"hha"</span>);</span><br><span class="line"></span><br><span class="line">        canvas.save();</span><br><span class="line">        /<span class="regexp">/设置被选中的直线的颜色</span></span><br><span class="line"><span class="regexp">        mPaint.setColor(mSelectColor);</span></span><br><span class="line"><span class="regexp">        for (int i = 0; i &lt; mSelectLine; i++) &#123;</span></span><br><span class="line"><span class="regexp">            canvas.drawLine(getWidth() /</span> <span class="number">2</span>, <span class="number">0</span>, getWidth() / <span class="number">2</span>, mLineLength, mPaint);</span><br><span class="line">            canvas.rotate(mDrgees, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        /<span class="regexp">/设置未被选中的直线的颜色。</span></span><br><span class="line"><span class="regexp">        mPaint.setColor(mUnSelectColor);</span></span><br><span class="line"><span class="regexp">        for (int i = 0; i &lt; mSumLine - mSelectLine; i++) &#123;</span></span><br><span class="line"><span class="regexp">            canvas.drawLine(getWidth() /</span> <span class="number">2</span>, <span class="number">0</span>, getWidth() / <span class="number">2</span>, mLineLength, mPaint);</span><br><span class="line">            canvas.rotate(mDrgees, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /<span class="regexp">/设置数量字体的颜色</span></span><br><span class="line"><span class="regexp">        mPaint.setColor(mNumColor);</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(mNumShow)) &#123;</span></span><br><span class="line"><span class="regexp">            mPaint.setTextSize(mNumTextSize);</span></span><br><span class="line"><span class="regexp">            mPaint.getTextBounds(mNumShow, 0, mNumShow.length(), mNumShowRect);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if(!TextUtils.isEmpty(mNumShow))&#123;</span></span><br><span class="line"><span class="regexp">            canvas.drawText(mNumShow, (getWidth() /</span> <span class="number">2</span> - mNumShowRect.width() / <span class="number">2</span>), (getHeight() / <span class="number">2</span> + mNumShowRect.height() / <span class="number">2</span>)</span><br><span class="line">                    , mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">/<span class="regexp">/        canvas.drawText(mNumShow, (getWidth() /</span> <span class="number">2</span> - mNumShowRect.width() / <span class="number">2</span>), (getHeight() / <span class="number">2</span> + mNumShowRect.height() / <span class="number">2</span>)</span><br><span class="line">/<span class="regexp">/                , mPaint);</span></span><br><span class="line"><span class="regexp">        Log.i("111",mNumShow +"---"+ (getWidth() /</span> <span class="number">2</span> - mNumShowRect.width() / <span class="number">2</span>) + <span class="string">"==="</span> + (getHeight() / <span class="number">2</span> + mNumShowRect.height() / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        /<span class="regexp">/设置单位字体的颜色。</span></span><br><span class="line"><span class="regexp">        mPaint.setColor(mUnitColor);</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(mUnit)) &#123;</span></span><br><span class="line"><span class="regexp">            mPaint.setTextSize(mUnitTextSize);</span></span><br><span class="line"><span class="regexp">            mPaint.getTextBounds(mUnit, 0, mUnit.length(), mUnitRect);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if(!TextUtils.isEmpty(mUnit))&#123;</span></span><br><span class="line"><span class="regexp">            canvas.drawText(mUnit, getWidth() /</span> <span class="number">2</span> - mUnitRect.width() / <span class="number">2</span>, getHeight() / <span class="number">2</span> + mNumShowRect.height() / <span class="number">2</span></span><br><span class="line">                    + mUnitRect.height() / <span class="number">2</span> + dp2px(<span class="number">20</span>), mPaint);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /<span class="regexp">/设置被选中的数目。</span></span><br><span class="line"><span class="regexp">    public void setSumSelect(int num) &#123;</span></span><br><span class="line"><span class="regexp">        if (num &gt; mSumLine) &#123;</span></span><br><span class="line"><span class="regexp">            num = mSumLine;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if (num &lt; 0) &#123;</span></span><br><span class="line"><span class="regexp">            num = 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        this.mSelectLine = num;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置单位文字</span></span><br><span class="line"><span class="regexp">    public void setUnit(String unit) &#123;</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(unit)) &#123;</span></span><br><span class="line"><span class="regexp">            this.mUnit = unit;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置单位颜色</span></span><br><span class="line"><span class="regexp">    public void setUnitColor(int color) &#123;</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(mUnit)) &#123;</span></span><br><span class="line"><span class="regexp">            this.mUnitColor = color;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置单位字体大小</span></span><br><span class="line"><span class="regexp">    public void setUnitTextSize(int size) &#123;</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(mUnit)) &#123;</span></span><br><span class="line"><span class="regexp">            this.mUnitTextSize = size;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置数量的文字</span></span><br><span class="line"><span class="regexp">    public void setNumText(String numText) &#123;</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(numText)) &#123;</span></span><br><span class="line"><span class="regexp">            this.mNumShow = numText;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置没有被选中的颜色</span></span><br><span class="line"><span class="regexp">    public void setUnSelectColor(int color) &#123;</span></span><br><span class="line"><span class="regexp">        this.mUnSelectColor = color;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置被选中的颜色</span></span><br><span class="line"><span class="regexp">    public void setSelectColor(int color) &#123;</span></span><br><span class="line"><span class="regexp">        this.mSelectColor = color;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置数量颜色</span></span><br><span class="line"><span class="regexp">    public void setmNumColor(int color) &#123;</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(String.valueOf(color))) &#123;</span></span><br><span class="line"><span class="regexp">            this.mNumColor = color;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置数量字体大小</span></span><br><span class="line"><span class="regexp">    public void setNumTextSize(int size) &#123;</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(String.valueOf(size))) &#123;</span></span><br><span class="line"><span class="regexp">            this.mNumTextSize = size;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置数目</span></span><br><span class="line"><span class="regexp">    public void setNumShow(String show) &#123;</span></span><br><span class="line"><span class="regexp">        if (!TextUtils.isEmpty(show)) &#123;</span></span><br><span class="line"><span class="regexp">            this.mNumShow = show;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        invalidate();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置直线的宽度。</span></span><br><span class="line"><span class="regexp">    public void setLineWidth(int width) &#123;</span></span><br><span class="line"><span class="regexp">        this.mLineWidth = width;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/设置直线的高度。</span></span><br><span class="line"><span class="regexp">    public void setLineLength(int length) &#123;</span></span><br><span class="line"><span class="regexp">        this.mLineLength = length;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/dp转化为px</span></span><br><span class="line"><span class="regexp">    private float dp2px(float dpVal) &#123;</span></span><br><span class="line"><span class="regexp">        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,</span></span><br><span class="line"><span class="regexp">                dpVal, getResources().getDisplayMetrics());</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>属性</strong></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;declare-styleable name=<span class="string">"PercentageCircle"</span>&gt;</span><br><span class="line">        &lt;!--被选中的文字的颜色--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"select_color"</span> format=<span class="string">"color"</span>/&gt;</span><br><span class="line">        &lt;!--没有被选中的文字的颜色--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"unselect_color"</span> format=<span class="string">"color"</span>/&gt;</span><br><span class="line">        &lt;!--数量单位的文字的颜色--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"unit_color"</span> format=<span class="string">"color"</span>/&gt;</span><br><span class="line">        &lt;!--数量文字的颜色--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"num_color"</span> format=<span class="string">"color"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--数量单位的文字--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"unit_text"</span> format=<span class="string">"string"</span>/&gt;</span><br><span class="line">        &lt;!--数量的字体size大小--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"num_text"</span> format=<span class="string">"string"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数量单位的文字--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"unit_text_size"</span> format=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">        &lt;!--数量的字体size大小--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"num_text_size"</span> format=<span class="string">"dimension"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--总数目的直线的条数--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"all_line_num"</span> format=<span class="string">"integer"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--间隔的角度的大小--&gt;</span><br><span class="line">        &lt;!--&lt;attr name=<span class="string">"interval_degree"</span> format=<span class="string">"integer"</span>/&gt;--&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--直线的宽度的大小--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"line_width"</span> format=<span class="string">"dimension"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--直线的长度--&gt;</span><br><span class="line">        &lt;attr name=<span class="string">"line_length"</span> format=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/declare-styleable&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>代码</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/可以动态的设置自定义view的属性。也可以在xml中设置属性。</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置被选中的数量。</span></span><br><span class="line"><span class="regexp">        percentageCircle.setSumSelect(20);</span></span><br><span class="line"><span class="regexp">        /</span>**</span><br><span class="line">         * <span class="number">1</span>：可以直接在代码中动态设置。</span><br><span class="line">         * <span class="number">2</span>：动态设置的会把 xml中设置的 数量和文字覆盖掉。</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置显示的数量。</span></span><br><span class="line"><span class="regexp">        percentageCircle.setNumShow(60+"");</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置单位文字</span></span><br><span class="line"><span class="regexp">        percentageCircle.setUnit("口数");</span></span><br><span class="line"><span class="regexp">        percentageCircle.setUnSelectColor(Color.BLACK);</span></span><br><span class="line"><span class="regexp">        percentageCircle.setSelectColor(Color.RED);</span></span><br><span class="line"><span class="regexp">        percentageCircle.setUnitColor(Color.GREEN);</span></span><br><span class="line"><span class="regexp">        percentageCircle.setmNumColor(Color.MAGENTA);</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h5><p><a href="https://github.com/Terry999555/PercentageCircle" target="_blank" rel="noopener">Github的源码地址–&gt;PercentageCircle</a></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>在model的build.gradle中添加<br><code>&#39;compile &#39;com.cyy:PercentageCircle:1.0.2&#39;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PercentageCircle-（显示百分比）控件&quot;&gt;&lt;a href=&quot;#PercentageCircle-（显示百分比）控件&quot; class=&quot;headerlink&quot; title=&quot;PercentageCircle （显示百分比）控件&quot;&gt;&lt;/a&gt;PercentageCircle （显示百分比）控件&lt;/h3&gt;
    
    </summary>
    
    
      <category term="自定义view" scheme="http://www.999555yun.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>通过AS 上传Android Library 到Bintray上的JCenter</title>
    <link href="http://www.999555yun.com/2017/11/02/%E9%80%9A%E8%BF%87AS-%E4%B8%8A%E4%BC%A0Android-Library-%E5%88%B0Bintray%E4%B8%8A%E7%9A%84JCenter/"/>
    <id>http://www.999555yun.com/2017/11/02/通过AS-上传Android-Library-到Bintray上的JCenter/</id>
    <published>2017-11-02T07:45:00.000Z</published>
    <updated>2017-11-02T09:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过AS 上传Android Library 到Bintray上的JCenter</p><a id="more"></a><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol><li><strong>使用</strong><br>在android studio的项目中我们经常会添加依赖（<strong>dependencies</strong>）在model的<strong>build.gradle</strong>中<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-111519141.jpg" alt="@如图|center|300*40"></li><li><strong>目的</strong></li></ol><ul><li>方便，快捷，简单。</li><li><strong>JAR</strong>（Java Library） java 开发库，包含我们需要的源代码和清单文件。</li><li><strong>AAR</strong>(Android Library)项目中需要用到的代码，资源，和清单文件等。比jar具有更好的效果（相对android开发）。</li></ul><ol start="3"><li><strong>分享</strong></li></ol><ul><li>把自己的Library 开源，让别人在项目中，通过依赖的方式使用。</li><li>通过AS 发布到Bintary 的JCenter中。</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ol><li><strong>AS项目构建</strong><br>首先我们的as开发的项目库是自动用JCenter的在Project的buidl.gradle中<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-112733201.jpg" alt="@如图|center|300*80"></li><li><p><strong>如何使用as上传</strong><br>首先我们需要有一个待上传的库model，和一个sample model（用来演示的列子的model）目录架构如下。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-113152401.jpg" alt="@如图|center|200*300"></p></li><li><p><strong>Bintary账号</strong></p></li></ol><ul><li>申请Bintary的账号<a href="https://bintray.com" target="_blank" rel="noopener">Bintary官网</a>。请注意<strong>大坑来袭，不要模仿，看完这段再配置</strong>。。当初登陆的时候没有注意，直接点击的右上角的<strong>sign in</strong><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-114031018.jpg" alt="如图|center|300*200"><br>然后直接选择的Github登陆，<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-114203316.jpg" alt="@如图|center|300*100"><br>登陆后点击右上角的名字后发现.有个图标和网络上别的教程不同。。去搜索才发现原来是注册的企业版的。。。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-114323562.jpg" alt="@点击|center|200*100"><br>网上也有更具企业版注册成功的，我的使用的是<br><code>apply plugin: &#39;com.novoda.bintray-release&#39;</code>测试后没有成功。可以生成仓库，可以从AS中发送到Bintary成功。但是就是到了最后的一步，没有Add to JCenter的按钮。搞了半天也没有找到<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-115546985.jpg" alt="@如图|"></li><li>试过删除Bintary下面的maven仓库，和maven仓库下面的package等。都是以失败告终。反复尝试各种方法都没有解决，崩溃。</li><li>想着重新去用<a href="https://bintray.com/signup/oss" target="_blank" rel="noopener">个人免费版注册网址</a>去注册，但是我用的Github每次登陆的时候还是自动的登陆到Bintary的企业版的那个页面。我的Github的账号是用Google邮箱绑定的，我用Google邮箱去申请也是提示我，这个邮箱已经被使用。</li><li>最后只能重新去申请了一个 foxmail的邮箱，通过qq邮箱很方便的去申请。然后再去<a href="https://bintray.com/signup/oss" target="_blank" rel="noopener">个人免费版注册网址</a>注册。最后进入的页面。<img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-125936135.jpg" alt="@如图|center|300*70"></li></ul><h3 id="AS配置"><a href="#AS配置" class="headerlink" title="AS配置"></a>AS配置</h3><ol><li>首先是在个人的Bintary中点击Edit Prifile<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-130228133.jpg" alt="@如图|center|200*200"><br>进入的页面如图，选择创建一个仓库。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-130453566.jpg" alt="@Repositories|center|200*200"><br>在右侧填入自己仓库的信息。再点击UPdata提交保存。（不用全填写）<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-130809984.jpg" alt="@会有一个cyy999555yun/maven">前面的是用户名，也就是一会需要在Library模块中的build.gradle配置的信息之一。</li><li>还需要我们生成自己的 <strong>API Key</strong><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-131147709.jpg" alt="@生成api key |center|300*100"><br>点击提交就会生成一个api key会在as提交的时候用到。</li><li><strong>配置AS</strong><br>首先在项目的<strong>Project</strong>的<strong>build.gradle</strong>添加一句话<code>classpath &#39;com.novoda:bintray-release:0.4.0&#39;</code> 后面的参数可以根据最新的更改（用这个也一样）。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-131615429.jpg" alt="@Project的build.gradle|center|300*85"></li><li>在<strong>Library Model</strong> 中配置<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-132215189.jpg" alt="@如图"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-132349182.jpg" alt="@填写 1位置的 "><br>2是用来通过Terminal上传的时候用到的。<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/添加下面这句</span></span><br><span class="line"><span class="regexp">    apply plugin: 'com.novoda.bintray-release'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    publish &#123;</span></span><br><span class="line"><span class="regexp">        userOrg = '你自己的' /</span><span class="regexp">/注册时候的用户名。</span></span><br><span class="line"><span class="regexp">        groupId = 'com.cyy'/</span><span class="regexp">/   /</span><span class="regexp">/compile引用时的第1部分</span></span><br><span class="line"><span class="regexp">        artifactId = 'PercentageCircle'/</span><span class="regexp">//</span><span class="regexp">/发布到JCenter上的项目名字，compile引用时的第2部分项目名</span></span><br><span class="line"><span class="regexp">        publishVersion = '1.0.1'/</span><span class="regexp">/版本号 ，compile引用时的最后部分，下次更新是只需要更改版本号即可</span></span><br><span class="line"><span class="regexp">        desc = 'A PercentageCircle '/</span><span class="regexp">/描述，不重要</span></span><br><span class="line"><span class="regexp">        website = 'https:/</span><span class="regexp">/github.com/</span>Terry999555/PercentageCircle<span class="string">'  //项目的GitHub网站</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="上传到Jcenter"><a href="#上传到Jcenter" class="headerlink" title="上传到Jcenter"></a>上传到Jcenter</h4><ol><li><strong>Terminal</strong><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-132607733.jpg" alt="@打开Terminal "></li></ol><ul><li><p>windows</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">gradlew clean build bintrayUpload </span><br><span class="line">-PbintrayUser=<span class="string">'就是刚才2位置的用户名'</span> </span><br><span class="line">-PbintrayKey=<span class="string">'填入自己的Api Key'</span> </span><br><span class="line">-PdryRun=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>mac</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">./gradlew clean build bintrayUpload </span><br><span class="line">-PbintrayUser=<span class="string">'就是刚才2位置的用户名'</span> </span><br><span class="line">-PbintrayKey=<span class="string">'填入自己的Api Key'</span> </span><br><span class="line">-PdryRun=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><p>mac在前面添加个  <strong>./</strong>   我的是win。<br>Api Key 就是自己Bintary账号中的<strong>Api Key</strong> 。用自己的信息替换’’ 中的。然后直接<strong>回车</strong>。</p><ol start="2"><li><strong>报错</strong></li></ol><ul><li>一个是自己的uer 和api key 写错 ，检查自己的账号的信息。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-133422709.jpg" alt="@如图|center|300*50"></li><li>还有就是编码的问题<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-133253542.jpg" alt="@如图|center|300*55"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-130119542.jpg" alt="@编码问题的错误|center|300*85"><br>解决办法，添加代码<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-133720886.jpg" alt="@如图 Libiary Model"><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">        tasks.withType(Javadoc) &#123;</span><br><span class="line">            options &#123;</span><br><span class="line">                encoding <span class="string">"UTF-8"</span></span><br><span class="line">                charSet <span class="string">'UTF-8'</span></span><br><span class="line">                links <span class="string">"http://docs.oracle.com/javase/7/docs/api"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>然后同步一下就好了。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-133911805.jpg" alt="@如图"></p><ol start="3"><li><strong>Bintary</strong><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-134143968.jpg" alt="@如图点击下面自动生成的包"><br>进入后如图.这次终于出来了。。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-134258317.jpg" alt="@点击Add to JCenter|center|300*150"><br>写一个描述。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-134354628.jpg" alt="mark|center|300*130"><br>到此就结束了，不过目前还是不能直接引用的，你需要等待bintray的工作人员审核，审核通过会给你发送站内Message，并且Add to Jcenter那个按钮就会消失了，此外你还可以根据你上传的groupId,访问该网站<a href="https://jcenter.bintray.com/你的groupId例如https://jcenter.bintray.com/com/cyy" target="_blank" rel="noopener">https://jcenter.bintray.com/你的groupId例如https://jcenter.bintray.com/com/cyy</a></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在Sample的model中引用自己的依赖。<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">compile <span class="string">'com.cyy:PercentageCircle:1.0.1'</span></span><br></pre></td></tr></table></figure></p><p>在应用的Model中的build.gradle中引入依赖。同步后使用。<br>会受到邮件提示，审核通过<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-151413451.jpg" alt="@如图|center|300*0"><br>通过后的显示<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-151404980.jpg" alt="@如图|center|300*0"></p><p>在添加Library Model的时候注意资源要注意，不要重复了。不可以在本项目中使用，会报错。。<br><code>Error: more than one library with package name &#39;com.cyy.user.percentagecirclelibrary&#39;</code><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-151354136.jpg" alt="@如图|center|300*0"></p><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><ol><li><p>当我们更新了新的版本的时候，直接修改，Library模块中的build.gradle的<strong>publishVersion</strong> 大于当前版本就好了。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">publish &#123;</span><br><span class="line">    publishVersion = <span class="string">'2.0.0'</span>/<span class="regexp">/修改版本号</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>win上传</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">gradlew clean build bintrayUpload </span><br><span class="line"> -PbintrayUser=你自己的用户名</span><br><span class="line"> -PbintrayKey=xxxxxxxxxxxxxxxxxxxxxx </span><br><span class="line"> -PdryRun=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><p>直接Build Succeed后 就直接升级了。</p><ol start="3"><li>产看结果<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171102-170830112.jpg" alt="@BIntary中的结果"><br>可以直接在项目中使用新的版本了。</li></ol><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://www.codeceo.com/article/creat-android-library.html" target="_blank" rel="noopener">http://www.codeceo.com/article/creat-android-library.html</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/51148825" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/51148825</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过AS 上传Android Library 到Bintray上的JCenter&lt;/p&gt;
    
    </summary>
    
    
      <category term="JCenter" scheme="http://www.999555yun.com/tags/JCenter/"/>
    
  </entry>
  
  <entry>
    <title>Android 屏幕旋转</title>
    <link href="http://www.999555yun.com/2017/10/18/Android-%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC/"/>
    <id>http://www.999555yun.com/2017/10/18/Android-屏幕旋转/</id>
    <published>2017-10-18T03:16:10.000Z</published>
    <updated>2017-10-18T03:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android 屏幕旋转带来的生命周期的问题和解决方法。</p></blockquote><a id="more"></a><h4 id="Android-屏幕旋转"><a href="#Android-屏幕旋转" class="headerlink" title="Android 屏幕旋转"></a>Android 屏幕旋转</h4><h5 id="设定旋转与否"><a href="#设定旋转与否" class="headerlink" title="设定旋转与否"></a>设定旋转与否</h5><ol><li><strong>清单配置文件 AndroidManifest.xml</strong><br>设置屏幕横屏或者竖屏<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> &lt;!--横屏--&gt;</span><br><span class="line"><span class="symbol">android:</span>screenOrientation=<span class="string">"landscape"</span></span><br><span class="line"> &lt;!--竖屏--&gt;</span><br><span class="line"><span class="symbol">android:</span>screenOrientation=<span class="string">"portrait"</span></span><br></pre></td></tr></table></figure></li></ol><p>这样设置后即使屏幕旋转，Activity也不会出现销毁或方向旋转等反应,屏幕只有一个方向。</p><ol start="2"><li><strong>动态代码设置</strong><br>需要动态改变横竖屏设置，只需要在代码中调用setRequestedOrientation()函数,一般在Activity的onCreate方法中设置<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/横屏设置</span></span><br><span class="line"><span class="regexp">setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/竖屏设置</span></span><br><span class="line"><span class="regexp">setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/默认设置</span></span><br><span class="line"><span class="regexp">setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);</span></span><br></pre></td></tr></table></figure></li></ol><p>这样做可以随意动态设置横竖屏的要求，但是当改变<strong>手机屏幕方向设置Activity会被销毁</strong>，重新构建。<br>　　如果用户的手机没有开启方向锁定或者在AndroidManifest.xml中设置了android:screenOrientation，默认情况下，该Activity不会响应屏幕旋转事件。在上述情况下，依然希望Activity能响应屏幕旋转，则添加如下代码<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/ onCreate 方法中 </span></span><br><span class="line"><span class="regexp">setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li>重写onConfigurationChanged()<br>如果你不希望旋转屏幕的时候Activity被不断的onDestroy()和onCreate() ，那么，可以使用次方法在AndroidMainfest.xml中添加configChanges</li></ol><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;activity <span class="symbol">android:</span>configChanges=<span class="string">"keyboardHidden|orientation|screenSize"</span></span><br><span class="line">&lt;<span class="regexp">/activity&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>keyboardHidden表示键盘辅助功能隐藏，API要大于13的时候使用。<br>在Activity配置中添加上述代码，可以避免在屏幕的横屏和竖屏的切换的过程中生命周期的onDestroy()和onCreate()的执行。<br>在Activity中重写方法onConfigurationChanged()方法对屏幕的变化来进行监听。</p></blockquote><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public void onConfigurationChanged(Configuration newConfig) &#123;    <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">    <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) &#123;        setContentView(R.layout.portrait_layout);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;</span><br><span class="line">        setContentView(R.layout.landscape_layout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回掉方法的优点和缺点<br><strong>优点</strong>： 可以随时监听屏幕的变化，并在代码中做相应的处理。<br><strong>缺点</strong>： 这种方法的调用，每次只能旋转90°，如果直接旋转180°，onConfiguarationChanged()方法不会被调用。</p><ol start="4"><li><strong>结合OrientationEventListtener()自定义设置</strong><br>如果你想更加完美，更加完全的掌控监听屏幕旋转变化，比如，转屏时不想重新onCreate，尤其是在Camera界面，不想出现旋转preview时屏幕的卡顿、黑屏等问题，那么，可以尝试</li></ol><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">private OrientationEventListener mOrientationListener;</span><br><span class="line"></span><br><span class="line">mOrientationListener = new OrientationEventListener(this) &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onOrientationChanged(int rotation) &#123;</span><br><span class="line">        <span class="keyword">if</span> (((rotation &gt;= <span class="number">0</span>) &amp;&amp; (rotation &lt;= <span class="number">45</span>)) <span class="params">||</span> (rotation &gt;= <span class="number">315</span>)<span class="params">||</span>((rotation &gt;= <span class="number">135</span>)&amp;&amp;(rotation &lt;= <span class="number">225</span>))) &#123;</span><br><span class="line">            /<span class="regexp">/portrait</span></span><br><span class="line"><span class="regexp">            Log.d(TAG, "Screen orientation is Portrait!");</span></span><br><span class="line"><span class="regexp">        &#125; else if (((rotation &gt; 45) &amp;&amp; (rotation &lt; 135))||((rotation &gt; 225) &amp;&amp; (rotation &lt; 315))) &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/landscape</span></span><br><span class="line"><span class="regexp">            Log.d(TAG, "Screen orientation is Landscape!");</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">mOrientationListener.enable();</span></span><br></pre></td></tr></table></figure><p>根据手机的旋转的角度来判断是横屏还是竖屏。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 屏幕旋转带来的生命周期的问题和解决方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android Screen" scheme="http://www.999555yun.com/tags/Android-Screen/"/>
    
  </entry>
  
  <entry>
    <title>Android 总结 四大组件之(Activity)</title>
    <link href="http://www.999555yun.com/2017/10/17/Android-%E6%80%BB%E7%BB%93-%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B-Activity/"/>
    <id>http://www.999555yun.com/2017/10/17/Android-总结-四大组件之-Activity/</id>
    <published>2017-10-17T11:13:05.000Z</published>
    <updated>2017-10-17T11:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Activity-讲解"><a href="#Activity-讲解" class="headerlink" title="Activity 讲解"></a>Activity 讲解</h4><a id="more"></a><h3 id="Android-总结-四大组件之-Activity"><a href="#Android-总结-四大组件之-Activity" class="headerlink" title="Android 总结 四大组件之(Activity)"></a>Android 总结 四大组件之(Activity)</h3><blockquote><p>android 四大组件 分别是Activity，Service服务,Content Provider内容提供者，BroadcastReceiver广播接收器。</p></blockquote><h4 id="Activity介绍"><a href="#Activity介绍" class="headerlink" title="Activity介绍"></a>Activity介绍</h4><blockquote><p>Activity类是应用程序整个生命周期的重要组成部分，活动的启动和组合方式是平台应用程序模型的基本部分。</p></blockquote><ul><li>Activity是一种展示型组件，用来和用户<strong>交互</strong>。</li><li>Activity的<strong>启动</strong>由<strong>Intent触发</strong>，其中Intent可以分为显示Intent和隐式Intent。</li><li>Activity是具有<strong>生命周期</strong>的。</li><li>Acticity组件可以有不同的<strong>启动模式</strong>，不同的启动模式具有不同的效果。</li><li>Intent可以用于Activity之间进行<strong>数据的传递</strong>。</li><li>Activity可以通过onstop(),onDestory()来停止或者销毁的。<h4 id="交互界面"><a href="#交互界面" class="headerlink" title="交互界面"></a>交互界面</h4><img src="http://omflg86rs.bkt.clouddn.com/blog/20171017-164425537.jpg" alt="@Activity+Fragment 显示的交互界面|center|100*180"><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4>首先在Android studio中建立的项目最初始的Activity我们称之为MainActivity<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;!-- 初始的 --&gt;</span><br><span class="line">&lt;activity <span class="symbol">android:</span>name=<span class="string">".activity.auth.SplashActivity"</span>&gt;</span><br><span class="line">      &lt;intent-filter&gt;</span><br><span class="line">         &lt;action <span class="symbol">android:</span>name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span><br><span class="line">         </span><br><span class="line">&lt;category <span class="symbol">android:</span>name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/intent-filter&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/activity</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>系统中的活动作为<strong>活动堆栈</strong>进行管理。当一个新的活动<strong>开始</strong>时，它被放置在<strong>堆栈的顶部</strong>，并成为<strong>正在运行的活动</strong> - <strong>以前的活动总是保持在堆栈中</strong>，并且在新的活动<strong>退出之前不会再到达前台</strong>。</p><ol><li>活动<strong>四个</strong>状态</li></ol><ul><li>如果某个活动位于<strong>屏幕的前台</strong>（位于<strong>堆栈顶部</strong>），则该活动处于<strong>活动状态</strong>或 <strong>正在运行</strong>。</li><li>如果一个活动<strong>失去焦点</strong>但<strong>仍然可见</strong>（也就是说，一个新的非全尺寸或透明的活动已经集中在您的活动之上），则会<strong>暂停</strong>。<strong>暂停的活动是完全活着</strong>的（它维护所有状态和成员信息，并保持附加到窗口管理器），<strong>但是在极低的内存情况下可能会被系统杀死。</strong></li><li>如果活动被其他活动<strong>完全遮挡</strong>，则会<strong>被停止</strong>。<strong>它仍然保留所有状态和成员信息</strong>，但是，<strong>用户不再可见</strong>，因此它的<strong>窗口被隐藏</strong>，<strong>并且当其他地方需要内存时，它通常会被系统杀死。</strong></li><li>如果<strong>活动暂停或停止</strong>，系统可以通过要求完成活动或者简单地杀死其进程来从内存中删除活动。当它<strong>再次显示</strong>给用户时，必须完全<strong>重新启动</strong>并<strong>恢复到之前的状态</strong>。</li></ul><ol start="2"><li>活动的重要<strong>状态路径</strong><blockquote><p>方形矩形表示当Activity在状态之间移动时可以实现的回调方法来执行操作。彩色椭圆形是活动可以进入的主要状态。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171017-170552848.jpeg" alt="@如图|center"></p></blockquote></li></ol><ul><li>启动Activity —&gt;调用方法顺序为<strong>onCreate()–&gt;onStart()–&gt;onResume()</strong> Activity进入运行状态。</li><li>用户销毁当前Activity–&gt;调用方法顺序为<strong>onPause()–&gt;onStop()—&gt;onDestory()</strong> 方法，结束当前Activity。</li><li>当前Activity由被<strong>覆盖状态</strong>回到<strong>前台</strong>或<strong>解锁屏</strong>或<strong>对话框消失</strong>,系统会<strong>调用onResume</strong>方法，再次进入运行状态。</li><li>当前Activity转到新的Activity界面或按<strong>Home键</strong>回到主屏，<strong>自身退居后台</strong>：系统会先调用<strong>onPause</strong>方法，然后调用<strong>onStop</strong>方法，进入<strong>停滞状态</strong>，此时<strong>不可见</strong>。</li><li>用户<strong>后退回到此Activity</strong>：系统会先调用<strong>onRestart方法</strong>，然后调用<strong>onStart</strong>方法，最后调用<strong>onResume</strong>方法，再次进入运行状态。</li><li>当前Activity处于被覆盖状态或者后台不可见状态，即第2步和第4步，系统内存不足，杀死当前Activity，而后用户退回当前Activity：再次调用onCreate方法、onStart方法、onResume方法，进入运行状态。</li><li>当前Activity被其他Activity覆盖其上或被锁屏或被对话框覆盖：系统会调用onPause方法，暂停当前Activity的执行。</li><li>当系统配置发生改变的时候。屏幕的<strong>横屏和竖屏</strong>发生的生命周期为。结束当前的活动，重新加载活动<strong>onPause()</strong>—&gt; <strong>onSaveInstanceState</strong>()—&gt;<strong>onStop</strong>()—&gt;<strong>onDestory</strong>()—&gt;<strong>onCreate</strong>()—<strong>保存的参数</strong>&gt;<strong>onStart</strong>()—&gt;<strong>onRestoreInstanceState</strong>()—&gt;<strong>nResume</strong>()—重新加载完毕。系统配置中内容很多，如何当某项内容发生改变后，我们不想系统重新创建Activity，可以给Activity指定configChanges属性，比如如果不想让屏幕旋转时重新创建,可以给onfigChanges属性添加orientation这个值。<code>android:configChanges=&quot;orientation&quot;</code></li><li>资源内存不足导致低优先级的Activity被杀死，导致Ativity被销毁并重新创建</li></ul><ol><li>正在和用户交互的Activity优先级最高。</li><li>可见但非前台的Activity，比如Activity中弹出了一个对话框，导致Activity可见但是位于后台无法和用户交互。</li><li>已经被暂停的Activity，优先级最低。</li></ol><h4 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h4><blockquote><p>默认的情况下，当我们多次启动一个Activity的时候，系统会创建多个实例并放入任务栈中。任务栈是一种先进后出的栈结构。</p></blockquote><ol><li><p>四种启动模式standard、singleTop、singleTask、singleInstance。</p><ul><li><strong>standard—标准模式</strong>，也是默认的启动模式。<br>每次启动一个Activity都会重新创建一个实例，不管这个实例是否存在。在这种模式下，谁启动了这个Activity，这个Activity就运行在启动它的那个Activity的任务栈中。</li></ul></li><li><p><strong>singleTop—栈顶复用模式</strong><br>如果新的Activity的实例已经存在并且<strong>位于栈顶</strong>，那么此Activity<strong>不会被重新创建</strong>。<br>如果新的Activity的实例<strong>已经存在但不是位于栈顶，那么此Activity仍然会重新创建。</strong></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;activity  <span class="symbol">android:</span>name=<span class="string">".MainActivity"</span></span><br><span class="line">   <span class="symbol">android:</span>launchMode=<span class="string">"singleTop"</span>&gt;</span><br><span class="line">      &lt;intent-filter&gt;</span><br><span class="line">&lt;action <span class="symbol">android:</span>name=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span><br><span class="line">&lt;category <span class="symbol">android:</span>name=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/intent-filter&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/activity</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>singleTask—栈内复用模式</strong><br>当一个具有singleTask模式的Activity请求启动后，比如说Activity A，系统首先会寻找是否存在A想要的任务栈，如果不存在A所需的任务栈，就会重新创建一个任务栈，然后创建A的实例并把A放入任务栈中。如果存在A所需的任务栈，这是要看A是否在栈中有实例存在，如果存在，就把A调到栈顶并调用它的onNewIntent方法，如果不存在，就创建A的实例并把A压入栈中.</p></li><li><strong>singleInstance—单实例模式</strong><br>除具有singleTask模式的所有特征外，singleInstance模式的Activity只能单独位于一个任务栈中。<h5 id="启动模式的方式"><a href="#启动模式的方式" class="headerlink" title="启动模式的方式"></a>启动模式的方式</h5></li></ol><ul><li>有两种方式指定启动模式,第二种方式优先级高于第一种</li><li><p>第一种是在清单文件为Activity指定启动模式</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">android:</span>name=<span class="string">".MainActivity"</span></span><br><span class="line">           <span class="symbol">android:</span>launchMode=<span class="string">"singleTask"</span>&gt;</span><br><span class="line">           &lt;intent-filter&gt;</span><br><span class="line">               &lt;action <span class="symbol">android:</span>name=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span><br><span class="line">               &lt;category <span class="symbol">android:</span>name=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span><br><span class="line">           &lt;<span class="regexp">/intent-filter&gt;</span></span><br><span class="line"><span class="regexp">       &lt;/activity</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>第二种是通过给Intent设置标志位来为Activity指定启动模式</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent mIntent =new Intent(MainActivity.this,MainActivity.<span class="keyword">class</span>);                </span><br><span class="line">mIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(mIntent);</span><br></pre></td></tr></table></figure></li><li><p>Activity的Flags</p><ul><li>FLAG_ACTIVITY_NEW_TASK<br>作用是为Activity指定singleTask启动模式，和在清单文件中指定效果相同。</li><li>FLAG_ACTIVITY_SINGLE_TOP<br>作用是为Activity指定singleTop启动模式，和在清单文件中指定效果相同。</li><li>FLAG_ACTIVITY_CLEAR_TOP<br>具有此标记位的Activity，当它启动时，在同一个任务栈中所有位于它上面的Activity都要出栈。</li><li>LAG_ACTIVITY_EXCLUDE_FROM_RECENTS<br>具有这个标记位的Activity不会出现在历史Activity的列表中，等同于指定android:excludeFromRecents=”true”。</li></ul></li></ul><h5 id="Activity的显示调用和隐式调用"><a href="#Activity的显示调用和隐式调用" class="headerlink" title="Activity的显示调用和隐式调用"></a>Activity的显示调用和隐式调用</h5><p>显示调用：明确指定被启动对象的组件信息<br>隐式调用：不需要指定组件信息，隐式调用需要Intent能够匹配目标组件IntentFilter中所设置的过滤信息，如果不匹配则无法调用目标Activity<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;activity <span class="symbol">android:</span>name=<span class="string">".SecondActivity"</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line"></span><br><span class="line">                &lt;action <span class="symbol">android:</span>name=<span class="string">"com.zhoujian.define"</span>/&gt;</span><br><span class="line">                &lt;action <span class="symbol">android:</span>name=<span class="string">"com.zhoujian.start"</span>/&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category <span class="symbol">android:</span>name=<span class="string">"com.zhoujian.text"</span>/&gt;</span><br><span class="line">                &lt;category <span class="symbol">android:</span>name=<span class="string">"com.zhoujian.cool"</span>/&gt;</span><br><span class="line">                &lt;category <span class="symbol">android:</span>name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span><br><span class="line"></span><br><span class="line">                &lt;data <span class="symbol">android:</span>mimeType=<span class="string">"text/plain"</span>/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;<span class="regexp">/intent-filter&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/activity</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li>action的匹配规则<br>要求Intent中的action存在且必须和过滤规则中的其中一个相同</li><li>category的匹配规则<br>可以不设置，要设置的话，每一个都必须和过滤规则中的任一个相同</li><li>data的匹配规则<br>和action的匹配规则类似，如果过滤规则中定义了data，那么Intent中必须要定义可匹配的data<br>下面给出匹配规则<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent mIntent = new Intent();</span><br><span class="line">mIntent.setAction(<span class="string">"com.zhoujian.define"</span>);</span><br><span class="line">mIntent.addCategory(<span class="string">"com.zhoujian.text"</span>);</span><br><span class="line">mIntent.addCategory(<span class="string">"com.zhoujian.cool"</span>);</span><br><span class="line">mIntent.setDataAndType(Uri.parse(<span class="string">"file://abc"</span>),<span class="string">"text/plain"</span>);</span><br><span class="line">startActivity(mIntent);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Activity之间数据的传递"><a href="#Activity之间数据的传递" class="headerlink" title="Activity之间数据的传递"></a>Activity之间数据的传递</h4><ol><li><strong>Intent传递简单数据</strong><br>在原Activity发送数据<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent  intent = new Intent(MainActivity.this,SecondActivity.<span class="keyword">class</span>);</span><br><span class="line">Bundle bundle = new Bundle();</span><br><span class="line">bundle.putString(<span class="string">"name"</span>,<span class="string">"周建"</span>);</span><br><span class="line">bundle.putInt(<span class="string">"age"</span>,<span class="number">25</span>);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li></ol><p>在目标Activity接受数据<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">bundle = intent.getExtras();</span><br><span class="line">String mName = bundle.getString(<span class="string">"name"</span>);</span><br><span class="line">int mAge = bundle.getInt(<span class="string">"age"</span>);</span><br><span class="line">Log.d(TAG, <span class="string">"姓名："</span>+mName+<span class="string">",年龄："</span>+mAge);</span><br></pre></td></tr></table></figure></p><ol start="2"><li>Intent传递JavaBean<br>实现Seralizable接口<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Serializable</span> &#123;</span></span><br><span class="line">private static final long  serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public int getAge()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age)</span><br><span class="line">    &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +<span class="string">"age="</span> + age + <span class="string">", name='"</span> + name + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在原Activity发送数据<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Person person= new Person();</span><br><span class="line">person.setName(<span class="string">"周建"</span>);</span><br><span class="line">person.setAge(<span class="number">25</span>);</span><br><span class="line">Intent  intent = new Intent(MainActivity.this,SecondActivity.<span class="keyword">class</span>);</span><br><span class="line">intent.putExtra(<span class="string">"person"</span>,person);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>在目标Activity接受数据<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">Person mPerson = (Person)intent.getSerializableExtra(<span class="string">"person"</span>);</span><br><span class="line">Log.d(TAG, mPerson.toString());</span><br></pre></td></tr></table></figure></p><ol start="3"><li>实现Parcelable接口<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">User</span>  <span class="title">implements</span> <span class="title">Parcelable</span>&#123;</span></span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line">    public User()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int describeContents() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void writeToParcel(Parcel dest, int flags) &#123;</span><br><span class="line">        dest.writeInt(this.age);</span><br><span class="line">        dest.writeString(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">    protected User(Parcel <span class="keyword">in</span>) &#123;</span><br><span class="line">        this.age = <span class="keyword">in</span>.readInt();</span><br><span class="line">        this.name = <span class="keyword">in</span>.readString();</span><br><span class="line">    &#125;</span><br><span class="line">    public static final Creator&lt;User&gt; CREATOR = new Creator&lt;User&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public User createFromParcel(Parcel source)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> new User(source);</span><br><span class="line">        &#125;</span><br><span class="line">       @Override</span><br><span class="line">        public User[] newArray(int size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> new User[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">   @Override</span><br><span class="line">    public String toString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> + <span class="string">"age="</span> + age + <span class="string">", name='"</span> + name + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在原Activity发送数据<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">User user = new User();</span><br><span class="line">user.setAge(<span class="number">25</span>);</span><br><span class="line">user.setName(<span class="string">"周建"</span>);</span><br><span class="line">Intent  intent = new Intent(MainActivity.this,SecondActivity.<span class="keyword">class</span>);</span><br><span class="line">intent.putExtra(<span class="string">"user"</span>,user);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>在目标Activity接受数据<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">User mUser = (User) intent.getParcelableExtra(<span class="string">"user"</span>);</span><br><span class="line">Log.d(TAG, mUser.toString());</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>Intent传递集合<br>在原Activity发送数据</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">User mUser = (User) intent.getParcelableExtra(<span class="string">"user"</span>);</span><br><span class="line">Log.d(TAG, mUser.toString());</span><br></pre></td></tr></table></figure></li><li><p>Intent传递集合<br>在原Activity发送数据</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Person&gt; personArrayList = new ArrayList&lt;Person&gt;();</span><br><span class="line">Person Aperson= new Person();</span><br><span class="line">Aperson.setName(<span class="string">"周建"</span>);</span><br><span class="line">Aperson.setAge(<span class="number">25</span>);</span><br><span class="line">personArrayList.add(Aperson);</span><br><span class="line">Person Bperson= new Person();</span><br><span class="line">Bperson.setName(<span class="string">"zhoujian"</span>);</span><br><span class="line">Bperson.setAge(<span class="number">28</span>);</span><br><span class="line">personArrayList.add(Bperson);</span><br><span class="line">Intent  intent = new Intent(MainActivity.this,SecondActivity.<span class="keyword">class</span>);</span><br><span class="line">intent.putExtra(<span class="string">"personArrayList"</span>,(Serializable)personArrayList);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></li></ol><p>在目标Activity接受数据<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">ArrayList&lt;Person&gt; mList = (ArrayList&lt;Person&gt;) intent.getSerializableExtra(<span class="string">"personArrayList"</span>);</span><br><span class="line">Log.d(TAG, mList.toString());</span><br></pre></td></tr></table></figure></p><ol start="6"><li>在目标Activity接受数据<br>MainActivity.java<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">private void clickEvent() &#123;</span><br><span class="line">        mButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                Intent intent = new Intent(MainActivity.this, SecondActivity.<span class="keyword">class</span>);</span><br><span class="line">                /<span class="regexp">/requestCode</span></span><br><span class="line"><span class="regexp">                startActivityForResult(intent, INTENT_FLAG);</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    @Override</span></span><br><span class="line"><span class="regexp">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span></span><br><span class="line"><span class="regexp">        if (resultCode == RESULT_OK)</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">            switch (requestCode)</span></span><br><span class="line"><span class="regexp">            &#123;</span></span><br><span class="line"><span class="regexp">                case INTENT_FLAG:</span></span><br><span class="line"><span class="regexp">                    String result = data.getStringExtra("msg");</span></span><br><span class="line"><span class="regexp">                    Toast.makeText(this, result, Toast.LENGTH_SHORT).show();</span></span><br><span class="line"><span class="regexp">                    break;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>SecondActivity.java<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">private void clickEvent() &#123;</span><br><span class="line">        mBtBack.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                Intent intent = new  Intent();                intent.putExtra(<span class="string">"msg"</span>,<span class="string">"我来自第二个界面"</span>);</span><br><span class="line">                setResult(RESULT_OK,intent);</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Activity-讲解&quot;&gt;&lt;a href=&quot;#Activity-讲解&quot; class=&quot;headerlink&quot; title=&quot;Activity 讲解&quot;&gt;&lt;/a&gt;Activity 讲解&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Android Activity" scheme="http://www.999555yun.com/tags/Android-Activity/"/>
    
  </entry>
  
  <entry>
    <title>(Win10）Pycharm安装Scrapy</title>
    <link href="http://www.999555yun.com/2017/10/10/python%EF%BC%88Win10%EF%BC%89Pycharm%E5%AE%89%E8%A3%85Scrapy/"/>
    <id>http://www.999555yun.com/2017/10/10/python（Win10）Pycharm安装Scrapy/</id>
    <published>2017-10-10T07:35:03.000Z</published>
    <updated>2017-10-13T08:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>python (Win10）Pycharm安装Scrapy</p><a id="more"></a><h4 id="pycharm中安装框架还是比较方便的"><a href="#pycharm中安装框架还是比较方便的" class="headerlink" title="pycharm中安装框架还是比较方便的"></a>pycharm中安装框架还是比较方便的</h4><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171013-155203679.jpg" alt="@如图|center|150*150"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171013-155352919.jpg" alt="@点击加号"><br>点击  <strong>+</strong><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171013-155551096.jpg" alt="@输入自己想要下载的模块"></p><ul><li>输入自己想要安装的框架，但是就是输入<strong>sracpy</strong> install 的时候提示错误。<br><strong>error: Microsoft Visual C++ 14.0 is required. Get it with “Microsoft Visual C++ Build Tools”: <a href="http://landinghub.visualstudio.com/visual-cpp-build-tools" target="_blank" rel="noopener">http://landinghub.visualstudio.com/visual-cpp-build-tools</a></strong> </li><li>让我们去下载这个软件，但是通过搜索发现，可以不用去下载这个，也可以安装上scrapy，就是先安装其他的模块，<strong>lxml,twisted,pypiwin32。</strong>  这三个模块是安装前提前安装的，由于我的<strong>lxml</strong>已经安装了，所以就去安装剩下的两个，<strong>pypiwin32。</strong>也可以通过pycharm搜索安装，但是在安装<strong>twisted</strong>的时候还是报错</li></ul><hr><h4 id="下载twisted"><a href="#下载twisted" class="headerlink" title="下载twisted"></a>下载twisted</h4><ul><li>找到文章说是要自己手动的去下载安装自己需要的版本。<br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">twisted下载</a><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171013-160550048.jpg" alt="@我的是win10 64 python3.5.2|center"></li><li>所以选择自己对应的版本下载到自己的电脑（位置随意），然后去手动的安装。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171013-160750728.jpg" alt="就是这个文件|center"><h4 id="安装-twisted"><a href="#安装-twisted" class="headerlink" title="安装 twisted"></a>安装 twisted</h4></li><li>打开命令提示符窗口，输入命令<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pip install <span class="symbol">E:</span>\Wenjian\Twisted\Twisted-<span class="number">17.9</span>.<span class="number">0</span>-cp35-cp35m-win_amd64.whl(下载好的twisted模块的whl文件路径)</span><br></pre></td></tr></table></figure></li></ul><p>提示安装成功后。再去pycharm下载scrapy。<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171013-155551096.jpg" alt="@下载后颜色变化蓝色"><br>最后就可以建立自己的项目了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python (Win10）Pycharm安装Scrapy&lt;/p&gt;
    
    </summary>
    
    
      <category term="python scrapy" scheme="http://www.999555yun.com/tags/python-scrapy/"/>
    
  </entry>
  
  <entry>
    <title>python学习1</title>
    <link href="http://www.999555yun.com/2017/10/10/python%20%E7%88%AC%E8%99%AB%EF%BC%88%E5%B0%8F%E8%AF%B4%EF%BC%89/"/>
    <id>http://www.999555yun.com/2017/10/10/python 爬虫（小说）/</id>
    <published>2017-10-10T07:35:03.000Z</published>
    <updated>2017-10-10T12:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>python 之 Beautiful Soup 4.4.0</p><a id="more"></a><h4 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h4><blockquote><p>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.</p><ol><li>列子：<br><code>find_all()</code><br><code>find_all( name , attrs , recursive , string , **kwargs )</code><br>find_all() 方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件.这里有几个例子<figure class="highlight xml"><figcaption><span>soup.find_all("title")</span></figcaption><table><tr><td class="code"><pre><span class="line"># [<span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">title</span>&gt;</span>]</span><br><span class="line"></span><br><span class="line">soup.find_all("p", "title")</span><br><span class="line"># [<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse's story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>]</span><br><span class="line"></span><br><span class="line">soup.find_all("a")</span><br><span class="line"># [<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/elsie"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line">#  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/lacie"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span>Lacie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line">#  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/tillie"</span> <span class="attr">id</span>=<span class="string">"link3"</span>&gt;</span>Tillie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>]</span><br><span class="line"></span><br><span class="line">soup.find_all(id="link2")</span><br><span class="line"># [<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sister"</span> <span class="attr">href</span>=<span class="string">"http://example.com/lacie"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span>Lacie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>]</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">soup.find(string=re.compile("sisters"))</span><br><span class="line"># u'Once upon a time there were three little sisters; and their names were\n'</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171010-201901858.jpg" alt="@ 图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 之 Beautiful Soup 4.4.0&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.999555yun.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title> Pycharm创建py文件自动添加文件头注释</title>
    <link href="http://www.999555yun.com/2017/09/07/Pycharm%E5%88%9B%E5%BB%BApy%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B4%E6%B3%A8%E9%87%8A/"/>
    <id>http://www.999555yun.com/2017/09/07/Pycharm创建py文件自动添加文件头注释/</id>
    <published>2017-09-06T16:20:52.000Z</published>
    <updated>2017-09-06T16:29:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pycharm创建py文件自动添加文件头注释"><a href="#Pycharm创建py文件自动添加文件头注释" class="headerlink" title="Pycharm创建py文件自动添加文件头注释"></a>Pycharm创建py文件自动添加文件头注释</h3><a id="more"></a><ol><li><strong>位置</strong><blockquote><p>File-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Python Script<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20170906-112600757.jpg" alt="enter image description here"></p></blockquote></li><li><strong>内容</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Time</span>    : $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>  : Aries</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Site</span>    : $&#123;SITE&#125;</span></span><br><span class="line"><span class="comment"># <span class="doctag">@File</span>    : $&#123;NAME&#125;.py</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Software</span>: $&#123;PRODUCT_NAME&#125;</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Desc</span>     :</span></span><br><span class="line"><span class="comment"># <span class="doctag">@license</span> : Copyright(C), Your Company</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Contact</span> : XXXXXX<span class="doctag">@gmail</span>.com</span></span><br></pre></td></tr></table></figure></li></ol><p>可以选择自己先要输入注释的部分展示。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Pycharm创建py文件自动添加文件头注释&quot;&gt;&lt;a href=&quot;#Pycharm创建py文件自动添加文件头注释&quot; class=&quot;headerlink&quot; title=&quot;Pycharm创建py文件自动添加文件头注释&quot;&gt;&lt;/a&gt;Pycharm创建py文件自动添加文件头注释&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.999555yun.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://www.999555yun.com/2017/08/26/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.999555yun.com/2017/08/26/数据库/</id>
    <published>2017-08-26T03:39:39.000Z</published>
    <updated>2018-01-26T06:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-数据库"><a href="#Android-数据库" class="headerlink" title="Android 数据库"></a>Android 数据库</h3><a id="more"></a><h4 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h4><blockquote><p>Android 系统自带的数据库</p></blockquote><ol><li><strong>SQLiteOpenHelper</strong><br>android提供的一个帮助类（抽象类）。写一个类要继承这个抽象类。</li></ol><ul><li><p><strong>构造方法</strong>:   4个参数<br>1—&gt; Context<br>2—&gt; 数据库名字<br>3—&gt; SQLiteDatabase.CursorFactory，可以null<br>4—&gt; int version 数据库的版本号</p>  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public MyDataBase(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123;</span><br><span class="line">       <span class="keyword">super</span>(context, name, factory, version);</span><br><span class="line">       this.mContext = context;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>表结构</strong><br><strong>primary key</strong> 设id为主键<br><strong>autoincrement</strong> id为自增长</p>  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public static final String CREAT_BOOK = <span class="string">"create table book ("</span></span><br><span class="line">            + <span class="string">"id Integer primary key autoincrement,"</span></span><br><span class="line">            + <span class="string">"author text,"</span></span><br><span class="line">            + <span class="string">"price real,"</span></span><br><span class="line">            + <span class="string">"pages integer,"</span></span><br><span class="line">            + <span class="string">"name text)"</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>Override</strong><br>1—&gt; <code>onCreate(SQLiteDatabase db)</code><strong>创建数据库</strong><br>2 —&gt; <code>onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)</code>        <strong>升级数据库</strong></p>  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">@(数据库)[数据库]Override</span><br><span class="line">    public void onCreate(SQLiteDatabase db) &#123;</span><br><span class="line">        db.execSQL(CREAT_BOOK);</span><br><span class="line">        Toast.makeText(mContext, <span class="string">"创建成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">/<span class="regexp">/ 升级</span></span><br><span class="line"><span class="regexp">@Override</span></span><br><span class="line"><span class="regexp">public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span></span><br><span class="line"><span class="regexp">        db.execSQL("drop table if exists book");</span></span><br><span class="line"><span class="regexp">        onCreate(db);</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>代码<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">SQLiteDatabase db = myDataBase.getWritableDatabase();</span><br><span class="line">SQLiteDatabase db = myDataBase.getReadableDatabase();</span><br></pre></td></tr></table></figure></li></ol><p>得到数据库</p><ol start="3"><li><strong>CURD</strong></li></ol><ul><li><strong>C(添加)</strong></li></ul><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">对HashMap的封装。</span><br><span class="line">ContentValues values = new ContentValues();</span><br><span class="line">/<span class="regexp">/添加数据</span></span><br><span class="line"><span class="regexp">values.put("name","青春万岁");</span></span><br><span class="line"><span class="regexp">values.put("author","王蒙");</span></span><br><span class="line"><span class="regexp">values.put("pages",300);</span></span><br><span class="line"><span class="regexp">values.put("price",25.00);</span></span><br><span class="line"><span class="regexp">db.insert("book",null,values);</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>U（更新）</strong>4个参数<br>1—–&gt; 表名<br>2—–&gt;ContentValues 对象<br>3,4–&gt; 用来约束的条件。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">更新数据</span><br><span class="line">values.put(<span class="string">"price"</span>,<span class="number">10.00</span>);</span><br><span class="line">db.update(<span class="string">"book"</span>,values,<span class="string">"name= ?"</span>,new String[]&#123;<span class="string">"蛙"</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>D(删除)</strong><br>参数—&gt; 表名和条件约束</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/删除数据</span></span><br><span class="line"><span class="regexp">db.delete("book","name = ?",new String[]&#123;"蛙"&#125;);</span></span><br></pre></td></tr></table></figure></li><li><p><strong>R(查询)</strong><br>1—–&gt; 表名<br>2—–&gt; 指定查询的列<br>3,4—–&gt;查询某一行或几行<br>5—–&gt; GroupBy列<br>6—–&gt; 对5的数据过滤<br>7—–&gt; 指定查询的排序方式</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/查询数据</span></span><br><span class="line"><span class="regexp">Cursor cursor = db.query("book", null, null, null, null, null, null, null);</span></span><br><span class="line"><span class="regexp">if (cursor.moveToFirst()) &#123;</span></span><br><span class="line"><span class="regexp">do &#123;</span></span><br><span class="line"><span class="regexp">String name = cursor.getString(cursor.getColumnIndex("name"));</span></span><br><span class="line"><span class="regexp">String author = cursor.getString(cursor.getColumnIndex("author"));</span></span><br><span class="line"><span class="regexp">int price = cursor.getInt(cursor.getColumnIndex("price"));</span></span><br><span class="line"><span class="regexp">int pages = cursor.getInt(cursor.getColumnIndex("pages"));</span></span><br><span class="line"><span class="regexp">Log.i("book table name:", name);</span></span><br><span class="line"><span class="regexp">Log.i("book table author:", author);</span></span><br><span class="line"><span class="regexp">Log.i("book table price:", price + "");</span></span><br><span class="line"><span class="regexp">Log.i("book table pages:", pages + "");</span></span><br><span class="line"><span class="regexp">&#125; while (cursor.moveToNext());</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-192644555.jpg" alt="@如图Api|center|500*260"></p><h4 id="LitePal数据库（一款开源数据库）"><a href="#LitePal数据库（一款开源数据库）" class="headerlink" title="LitePal数据库（一款开源数据库）"></a>LitePal数据库（一款开源数据库）</h4><ol><li><strong>配置</strong><ul><li>在App/build.gradle中添加依赖。<br><code>implementation &#39;org.litepal.android:core:1.6.0&#39;</code></li><li>在main/assets 下建立一个litepal.xml文件<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-193231624.jpg" alt="@如图|center|400*130"></li></ul></li></ol><ul><li>在<strong>清单文件</strong>中 <strong>application</strong>添加<br><code>android:name=&quot;org.litepal.LitePalApplication&quot;</code></li></ul><hr><ol start="2"><li><strong>创建和升级</strong><blockquote><p>Litepal采取的是<strong>对象关系映射（ORM）</strong> 的模式。使用的编程的语言是面向对象的，而数据库是关系型的数据库，将面向对象的语言和关系型的数据库建立一种映射关系。</p></blockquote></li></ol><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">book</span> <span class="title">extends</span> <span class="title">DataSupport</span> &#123;</span></span><br><span class="line">    private int id;</span><br><span class="line">    private String author;</span><br><span class="line">    private String name;</span><br><span class="line">     public int getId() &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getAuthor() &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAuthor(String author) &#123;</span><br><span class="line">        this.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用javabean来建立表结构。<strong>类中的没一个字段，表示了表中的每一列。</strong><br>book类对应了book表。<br>将book添加到litepal.xml的映射模型列表中。完整的包名。</p><ul><li><strong>创建</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/使用三方的数据哭，对象关系映射LitePal数据库。</span></span><br><span class="line"><span class="regexp">        mBtn_db.setOnClickListener(new View.OnClickListener() &#123;</span></span><br><span class="line"><span class="regexp">            @Override</span></span><br><span class="line"><span class="regexp">            public void onClick(View v) &#123;</span></span><br><span class="line"><span class="regexp">                Connector.getDatabase();</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br></pre></td></tr></table></figure></li></ul><p><code>Connector.getDatabase();</code> 调用这个方法就会自动创建完成数据库。</p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-194809521.jpg" alt="@如图Book.db|center|500*250">还有数据库日志 Book.db-journal文件。<br>下面的数据路是用SQLite生成的。</p><p><strong>升级</strong><br>直接在表结构的映射模型中添加一个javabean对象就添加一个表。如上图配置中的<strong>Category</strong>类，添加一个包名到列表中，字段的更新直接在book中添加book类的属性。<br><code>private String press</code><br><strong>效果</strong><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-195439064.jpg" alt="@如图Book.db|center|300*100"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-195451432.jpg" alt="@如图Book.db|center|300*100"></p><ol start="3"><li><strong>增删改查</strong></li></ol><ul><li>增<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">mBtn_insert.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(View v) &#123;</span><br><span class="line">               Book book = new Book();</span><br><span class="line">               book.setAuthor(<span class="string">"莫言"</span>);</span><br><span class="line">               book.setId(<span class="number">1</span>);</span><br><span class="line">               book.setName(<span class="string">"蛙"</span>);</span><br><span class="line">               book.setPages(<span class="number">300</span>);</span><br><span class="line">               book.setPress(<span class="string">"长江出版社"</span>);</span><br><span class="line">               book.setPrice(<span class="number">50.00</span>f);</span><br><span class="line">               book.save();</span><br><span class="line">               /<span class="regexp">/可以循环，或者实例化多个，依次添加。。</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">       &#125;);</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-195935073.jpg" alt="@如图Book.db|center|500*150"></p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-195828656.jpg" alt="@如图Book.db|center|500*150"></p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-195813905.jpg" alt="@如图Book.db|center|500*150"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-195956728.jpg" alt="@如图Book.db|center|500*150"></p><ul><li><strong>改</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">mBtn_update.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Book book = new Book();</span><br><span class="line">                book.setPrice(<span class="number">100.00</span>f);</span><br><span class="line">                book.setPress(<span class="string">"山东出版社"</span>);</span><br><span class="line">                book.updateAll(<span class="string">"name=? and author = ?"</span>,<span class="string">"天龙八部"</span>,<span class="string">"金庸"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-200011632.jpg" alt="@如图Book.db|center|500*150"></p><ul><li><strong>删</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/删除数据</span></span><br><span class="line"><span class="regexp">       mBtn_delete.setOnClickListener(new View.OnClickListener() &#123;</span></span><br><span class="line"><span class="regexp">           @Override</span></span><br><span class="line"><span class="regexp">           public void onClick(View v) &#123;</span></span><br><span class="line"><span class="regexp">               /</span><span class="regexp">/删除价格小于16的 数据。</span></span><br><span class="line"><span class="regexp">               DataSupport.deleteAll(Book.class,"price&lt;?","16");</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">       &#125;);</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-200024849.jpg" alt="@如图Book.db|center|500*150"></p><ul><li><strong>查</strong><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/查询数据</span></span><br><span class="line"><span class="regexp">       mBtn_query.setOnClickListener(new View.OnClickListener() &#123;</span></span><br><span class="line"><span class="regexp">           @Override</span></span><br><span class="line"><span class="regexp">           public void onClick(View v) &#123;</span></span><br><span class="line"><span class="regexp">               List&lt;Book&gt; bookList = DataSupport.findAll(Book.class);</span></span><br><span class="line"><span class="regexp">               for (Book key:bookList) &#123;</span></span><br><span class="line"><span class="regexp">                   Log.i("book","作者:"+key.getAuthor());</span></span><br><span class="line"><span class="regexp">                   Log.i("book","出版社:"+key.getPress());</span></span><br><span class="line"><span class="regexp">                   Log.i("book","价格:"+key.getPrice());</span></span><br><span class="line"><span class="regexp">                   Log.i("book","书名:"+key.getName());</span></span><br><span class="line"><span class="regexp">                   Log.i("book","页数:"+key.getPages());</span></span><br><span class="line"><span class="regexp">                   Log.i("book","id:"+key.getId());</span></span><br><span class="line"><span class="regexp">               &#125;</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">       &#125;);</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-200040080.jpg" alt="@如图Book.db|center|500*150"></p><p><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-200753017.jpg" alt="@如图|center|500*0"><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20171108-200909489.jpg" alt="@如图|center|500*0"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android-数据库&quot;&gt;&lt;a href=&quot;#Android-数据库&quot; class=&quot;headerlink&quot; title=&quot;Android 数据库&quot;&gt;&lt;/a&gt;Android 数据库&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android TouchEvent</title>
    <link href="http://www.999555yun.com/2017/08/21/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>http://www.999555yun.com/2017/08/21/Android-事件分发/</id>
    <published>2017-08-21T09:31:00.000Z</published>
    <updated>2017-08-21T16:08:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件分发的学习"><a href="#事件分发的学习" class="headerlink" title="事件分发的学习"></a>事件分发的学习</h3><a id="more"></a><h3 id="事件分发的学习-1"><a href="#事件分发的学习-1" class="headerlink" title="事件分发的学习"></a>事件分发的学习</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>事件分发是android 学习过程中要掌握的知识。</p></blockquote><h4 id="1-基础认知"><a href="#1-基础认知" class="headerlink" title="1. 基础认知"></a>1. 基础认知</h4><h5 id="1-1-事件分发的对象"><a href="#1-1-事件分发的对象" class="headerlink" title="1.1 事件分发的对象"></a>1.1 事件分发的对象</h5><blockquote><p>事件分发的对象–&gt; 事件（event）</p></blockquote><ul><li>用户在点击手机屏幕的时候(view或者ViewGroup 派生的控件)，将产生点击事件（Touch事件）。</li><li>主要分为4种点击的事件： <ul><li>MotionEvent.ACTION_DOWN :  按下View（所有事件的开始）</li><li>MotionEvent.ACTION_MOVE:  滑动View</li><li>MotionEvent.ACTION_CANCEL:  非人为原因结束本次事件</li><li>MotionEvent.ACTION_UP:  抬起View（与DOWN对应）</li></ul></li><li><p>一次完整事件的流程:  从手指接触屏幕至手指离开屏幕,任何事件列都是以DOWN事件开始，UP事件结束，中间有无数的MOVE事件，如下图:<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20170821-165102682.png" alt="@ 流程图|center"><br>即当一个MotionEvent 产生后，系统需要把这个事件传递给一个具体的 View 去处理。</p><h5 id="1-2-事件分发的本质"><a href="#1-2-事件分发的本质" class="headerlink" title="1.2 事件分发的本质"></a>1.2 事件分发的本质</h5><blockquote><p>当一个事件发生后，系统会将事件传递给某一个具体的view去处理，这个事件的传递的过程就是事件的分发。</p></blockquote><h5 id="1-3-事件传递的对象"><a href="#1-3-事件传递的对象" class="headerlink" title="1.3 事件传递的对象"></a>1.3 事件传递的对象</h5><blockquote><p>一个点击事件产生后，传递顺序是：Activity（Window） -&gt; ViewGroup -&gt; View</p></blockquote></li><li><p>Android的UI界面是由Activity、ViewGroup、View及其派生类组合而成的.<br><img src="http://omflg86rs.bkt.clouddn.com/blog/20170821-170752338.png" alt="@ ui 流程 | center "></p></li><li><p>View是所有UI组件的基类</p><blockquote><p>一般Button、ImageView、TextView等控件都是继承父类View</p></blockquote></li><li><p>ViewGroup是容纳UI组件的容器，即一组View的集合（包含很多子View和子VewGroup）。</p><blockquote><ol><li>其本身也是从View派生的，即ViewGroup是View的子类</li><li>是Android所有布局的父类或间接父类：项目用到的布局（LinearLayout、RelativeLayout等），都继承自ViewGroup，即属于ViewGroup子类。</li><li>与普通View的区别：ViewGroup实际上也是一个View，只不过比起View，它多了可以包含子View和定义布局参数的功能。</li></ol></blockquote><h5 id="事件分发由哪些方法完成？"><a href="#事件分发由哪些方法完成？" class="headerlink" title="事件分发由哪些方法完成？"></a>事件分发由哪些方法完成？</h5><blockquote><p><code>dispatchTouchEvent()</code> 、<code>onInterceptTouchEvent()</code>和<code>onTouchEvent()</code><br><img src="http://omflg86rs.bkt.clouddn.com/blog/20170821-171237868.png" alt="@ 事件分发方法|center"></p></blockquote></li></ul><h5 id="1-5-小结"><a href="#1-5-小结" class="headerlink" title="1.5 小结"></a>1.5 小结</h5><ul><li>事件分发的本质是:   事件是有那个对像产生，经过那些对象，最终到达那个对象，并且得到处理。<blockquote><p>对象是指 Activity、ViewGroup、View.</p></blockquote></li><li>顺序:  Activity（Window） -&gt; ViewGroup -&gt; View</li><li>事件分发过程由dispatchTouchEvent() 、onInterceptTouchEvent()和onTouchEvent()三个方法协助完成</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件分发的学习&quot;&gt;&lt;a href=&quot;#事件分发的学习&quot; class=&quot;headerlink&quot; title=&quot;事件分发的学习&quot;&gt;&lt;/a&gt;事件分发的学习&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Android Event" scheme="http://www.999555yun.com/tags/Android-Event/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava学习</title>
    <link href="http://www.999555yun.com/2017/07/26/Rxjava%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.999555yun.com/2017/07/26/Rxjava学习/</id>
    <published>2017-07-26T06:41:48.000Z</published>
    <updated>2018-01-26T06:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RxJava2-知识点总结"><a href="#RxJava2-知识点总结" class="headerlink" title="RxJava2 知识点总结"></a>RxJava2 知识点总结</h3><a id="more"></a><p>@(RxJava 和Retrofit)</p><blockquote><p><strong>响应式编程</strong></p></blockquote><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><strong>同步/异步</strong>  : 同步/异步： 关注的是消息通信机制，同步是指 发出一个调用，在没有得到结果之前，该调用就不返回，但是一旦调用返回，就得到返回值了； 而异步是指 调用发出后，调用直接返回，但不会立刻得到调用的结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用； 异步强调被动通知。</li><li><strong>阻塞/非阻塞</strong>  : 关注的是程序在等待调用结果（消息，返回值）时的状态；阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。 非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。如java8 stream为阻塞式，Future为非阻塞式的； 非阻塞强调状态主动轮询。</li><li><strong>并发</strong>(Concurrency)与并行(parallelism) ： 并发是一个更通用的概念，两个并发线程被调度在一个单核处理上运行，这就是并发性，而非并行. 并行性更可能出现在多核，多CPU或分布式系统上。编写代码时一般不区分两者。</li><li><strong>函数式编程</strong> ( Functional Programming ) ：函数式编程将程序描述为表达式和变换，以数学方程的形式建立模型，并尽量避免可变的状态。每个逻辑分类(filter,map，reduce等)都由不同函数所表示，这些实现底层次的变换，而用户定义的高阶函数作为参数来实现真正的业务。</li><li><strong>函数响应式编程</strong>（Functional Reactive Programming)）：响应式编程是建立在观者者模式上的一种编程范式，对异步数据流进行编程，同时该事件流是按时间排序的序列（不同于java8中的stream）；虽然响应式编程框架不一定要求是函数式的，但是RxJava等响应式编程框架都是结合了函数式编程的。</li></ul><h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><p><strong>Flowable &amp; Observable</strong></p><ul><li><strong>Observable</strong> :  不支持被压;</li><li><strong>Flowable</strong>  : Observable新的实现，支持背压，同时实现Reactive Streams 的 Publisher 接口。</li></ul><ol><li>什么时候使用Observable ：<ul><li>一般处理最大不超过1000条数据，并且几乎不会出现内存溢出；</li></ul></li><li>什么时候使用Flowable ：<ul><li>处理以某种方式产生超过10K的元素；</li><li>文件读取与分析，例如 读取指定行数的请求；</li><li>通过JDBC 读取数据库记录， 也是一个阻塞的和基于拉取模式，并且由ResultSet.next() 控制；</li><li>网络IO流;</li><li>有很多的阻塞和/或 基于拉取的数据源，但是又想得到一个响应式非阻塞接口的。</li></ul></li></ol><h4 id="RxJava2-的主要的操作"><a href="#RxJava2-的主要的操作" class="headerlink" title="RxJava2 的主要的操作"></a>RxJava2 的主要的操作</h4><ol><li>创建一个Flowable </li></ol><ul><li>fromArray &amp; fromIterable &amp; just,直接从数组或迭代器中产生；</li></ul><pre><code class="ruby">List&lt;String&gt; list= Arrays.asList (<span class="string">"blue"</span>, <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"orange"</span>, <span class="string">"cyan"</span>, <span class="string">"purple"</span>);Flowable.fromIterable(list).skip(<span class="number">2</span>).subscribe(System.out::println);    Flowable.fromArray(list.toArray()).subscribe(System.out::println);Flowable.just(<span class="string">"blue"</span>).subscribe(System.out::println);</code></pre><ol start="2"><li>amb &amp; concat &amp; merge, 由多个Flowable产生结合;</li></ol><ul><li><strong>amb</strong> : 给定两个或多个Flowable，只发射最先发射数据的Flowable，如下面示例中的f1被发射；</li><li><strong>concat</strong> : 给定多个Flowable， 按照Flowable数组顺序,依次发射数据，不会交错，下面示例中f1,f2中数据依次发射;</li><li><strong>merge</strong> : 给定多个Flowable， 按照Flowable数组中数据发射的顺序组合成新的Flowable，各Flowable数据可能会交错(等价于转换操作中的flatMap)；</li><li><strong>switchOnNext</strong> ：给定能发射多个Flowable的Flowable,顺序发射各子Flowable,最新发射的子Flowable覆盖当前子Flowable中还未发射的元素(由switchMap实现)。</li></ul><h4 id="异步与并发（Asynchronized-amp-Concurrency）"><a href="#异步与并发（Asynchronized-amp-Concurrency）" class="headerlink" title="异步与并发（Asynchronized &amp; Concurrency）"></a>异步与并发（Asynchronized &amp; Concurrency）</h4><ol><li>RxJava 通过一些操作统一了 同步和异步，阻塞与非阻塞，并行与并发编程。<br><strong>observeOn &amp; subscribeOn &amp; Scheduler</strong></li></ol><ul><li>subscribeOn 和 observeOn 都是用来切换线程用的,都需要参数 Scheduler.</li><li>Scheduler ,调度器, 是RxJava 对线程控制器 的 一个抽象,RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景.<ul><li>io,I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率;</li><li>newThread, 总是启用新线程，并在新线程中执行操作；</li><li>single， 使用定长为1 的线程池（newScheduledThreadPool(1)），重复利用这个线程;</li><li>subscribeOn 将Flowable 的数据发射 切换到 Scheduler 所定义的线程， 只有第一个 subscribeOn 操作有效 ；</li><li>observeOn 指定 observeOn 后续操作所在线程，可以联合多个 observeOn 将切换多次 线程 ;</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RxJava2-知识点总结&quot;&gt;&lt;a href=&quot;#RxJava2-知识点总结&quot; class=&quot;headerlink&quot; title=&quot;RxJava2 知识点总结&quot;&gt;&lt;/a&gt;RxJava2 知识点总结&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Rxjava" scheme="http://www.999555yun.com/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>反编译</title>
    <link href="http://www.999555yun.com/2017/07/20/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>http://www.999555yun.com/2017/07/20/反编译/</id>
    <published>2017-07-20T06:38:06.000Z</published>
    <updated>2018-01-26T06:38:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017-反编译的使用-Jd-gui-jar的使用"><a href="#2017-反编译的使用-Jd-gui-jar的使用" class="headerlink" title="2017    反编译的使用 Jd_gui.jar的使用"></a>2017    反编译的使用 Jd_gui.jar的使用</h3><a id="more"></a><p>@(反编译的使用)</p><blockquote><p>反编译软件的时候用介绍</p></blockquote><ol><li>首先要下载两个工具：dex2jar和JD-GUI，前者是将apk中的classes.dex转化成Jar文件，而JD-GUI是一个反编译工 具，可以直接查看Jar包的源代码。</li></ol><p><img src="./1486453373056.png" alt="@软件的图标 | center "></p><hr><ol start="2"><li>首先将apk文件，将后缀改为zip，解压，得到其中的classes.dex，它就是java文件编译再通过dx工具打包而成的；</li></ol><p><img src="./1486453605397.png" alt="@你要反编译的apk|center"></p><ul><li>解压下载的dex2jar。<br><img src="./1486453663628.png" alt="@ 解压后"><ul><li>将classes.dex复制到dex2jar.bat所在目录。<br><img src="./1486453819102.png" alt="@复制"></li></ul></li></ul><ul><li><p>在命令行下定位到dex2jar.bat所在目录。<br><img src="./1486453879014.png" alt="@进入你的盘符"></p></li><li><p>运行<br>dex2jar.bat classes.dex</p></li></ul><p><img src="./1486453918211.png" alt="@运行"></p><ul><li>生成classes.dex.dex2jar.jar<br><img src="./1486453947402.png" alt="@生成我们需要的jar"></li></ul><hr><ol start="3"><li>运行JD-GUI，打开上面生成的jar包，即可看到源代码了</li></ol><p><img src="./1486543466487.png" alt="@ 结果 | center | 10  * 20"></p><ol start="4"><li>当我为了防止反编译的时候。<blockquote><p>用360 加固后的效果 </p></blockquote></li></ol><p><img src="./1486543752145.png" alt="@加固后 | left | 100 *20 "></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2017-反编译的使用-Jd-gui-jar的使用&quot;&gt;&lt;a href=&quot;#2017-反编译的使用-Jd-gui-jar的使用&quot; class=&quot;headerlink&quot; title=&quot;2017    反编译的使用 Jd_gui.jar的使用&quot;&gt;&lt;/a&gt;2017    反编译的使用 Jd_gui.jar的使用&lt;/h3&gt;
    
    </summary>
    
    
      <category term="反编译" scheme="http://www.999555yun.com/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>hexo theme 头像不显示</title>
    <link href="http://www.999555yun.com/2017/05/21/hexo-theme-%E5%A4%B4%E5%83%8F%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <id>http://www.999555yun.com/2017/05/21/hexo-theme-头像不显示/</id>
    <published>2017-05-21T15:48:14.000Z</published>
    <updated>2017-08-21T15:59:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spfk-主题头像不显示的问题"><a href="#spfk-主题头像不显示的问题" class="headerlink" title="spfk 主题头像不显示的问题"></a>spfk 主题头像不显示的问题</h3><a id="more"></a><h4 id="hexo-文件的介绍"><a href="#hexo-文件的介绍" class="headerlink" title="hexo 文件的介绍"></a>hexo 文件的介绍</h4><ol><li>hexo\source_posts 是我们要博客的地方<code>hexo new &quot;标题名字&quot;</code> </li><li>public 文件夹是我们hexo g 生成的，可以随时的删除。清楚缓存。<br>或者使用 <code>hexo clean</code>  清除。</li><li>有的时候我们下载的主题中会存在 .git 文件，要删除。</li><li>hexo clean 清除、hexo s 开启本地服务、hexo g 生成本地文件（public）<br> hexo d 把本地的文件提交到 github上面。就是提交的(public) 文件。<h4 id="spfk-主题下载之后，头像不显示，要改变一个-hexo-themes-spfk-config-ylm文件中的一个"><a href="#spfk-主题下载之后，头像不显示，要改变一个-hexo-themes-spfk-config-ylm文件中的一个" class="headerlink" title="spfk 主题下载之后，头像不显示，要改变一个 hexo\themes\spfk_config.ylm文件中的一个"></a>spfk 主题下载之后，头像不显示，要改变一个 hexo\themes\spfk_config.ylm文件中的一个</h4>标志 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 是否开启主页及加载头像时的动画效果</span></span><br><span class="line"><span class="comment"># Animation in Homepage and Loading avatar</span></span><br><span class="line"><span class="comment"># ** animate: false **   // **这个该为false**</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;spfk-主题头像不显示的问题&quot;&gt;&lt;a href=&quot;#spfk-主题头像不显示的问题&quot; class=&quot;headerlink&quot; title=&quot;spfk 主题头像不显示的问题&quot;&gt;&lt;/a&gt;spfk 主题头像不显示的问题&lt;/h3&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.999555yun.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android 倒计时CountDownTimer</title>
    <link href="http://www.999555yun.com/2017/04/13/Android%20%E5%80%92%E8%AE%A1%E6%97%B6CountDownTimer/"/>
    <id>http://www.999555yun.com/2017/04/13/Android 倒计时CountDownTimer/</id>
    <published>2017-04-13T07:13:43.000Z</published>
    <updated>2017-08-21T09:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-倒计时CountDownTimer"><a href="#Android-倒计时CountDownTimer" class="headerlink" title="Android 倒计时CountDownTimer"></a>Android 倒计时CountDownTimer</h3><a id="more"></a><ol><li><p>倒计时抽象类（android.os 包中） </p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">public abstract <span class="class"><span class="keyword">class</span> <span class="title">CountDownTimer</span> &#123;</span></span><br><span class="line">    public CountDownTimer(long millisInFuture, long countDownInterval) &#123;</span><br><span class="line">        throw new RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public final synchronized void cancel() &#123;</span><br><span class="line">        throw new RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public final synchronized CountDownTimer start() &#123;</span><br><span class="line">        throw new RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   public abstract void onTick(long var1);</span><br><span class="line">   public abstract void onFinish();</span><br></pre></td></tr></table></figure><p><strong>构造函数</strong> </p><blockquote><p><code>public CountDownTimer(long millisInFuture, long countDownInterval)</code></p></blockquote></li></ol><ul><li>第一个参数：倒计时的总的时间(ms)</li><li><p>第二个参数：倒计时的间隔的时间(ms)。</p><p><strong>方法</strong></p></li><li>cncel() 取消当前的任务</li><li>onFinish()   当前任务完成的时候回调</li><li>onTick(long millisUntilFinished)  当前任务每完成一次倒计时间隔时间时回调</li><li>start() 开始当前的任务</li></ul><hr><ol start="2"><li><p><strong>使用</strong></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/<span class="regexp">/通过倒计时的方式来控制后面的外圆的旋转。</span></span><br><span class="line"><span class="regexp">   private CountDownTimer mCountDownTimer = new CountDownTimer(600 * 1000L, 50L) &#123;</span></span><br><span class="line"><span class="regexp">       @Override</span></span><br><span class="line"><span class="regexp">       public void onTick(long millisUntilFinished) &#123;</span></span><br><span class="line"><span class="regexp">           mAngle += 10;</span></span><br><span class="line"><span class="regexp">           if (mAngle &gt; 36000) &#123;</span></span><br><span class="line"><span class="regexp">               mAngle = 0;</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">           /</span><span class="regexp">/可以直接在方法中刷新UI。此处是图片边框的旋转。</span></span><br><span class="line"><span class="regexp">           ViewHelper.setRotation(ivArc, mAngle); </span></span><br><span class="line"><span class="regexp">       &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       @Override</span></span><br><span class="line"><span class="regexp">       public void onFinish() &#123;</span></span><br><span class="line"><span class="regexp">           start();</span></span><br><span class="line"><span class="regexp">       &#125;</span></span><br><span class="line"><span class="regexp">   &#125;;</span></span><br></pre></td></tr></table></figure></li></ol><p>倒计时10分钟（600秒），每隔50毫秒。刷新一次图片旋转角度。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android-倒计时CountDownTimer&quot;&gt;&lt;a href=&quot;#Android-倒计时CountDownTimer&quot; class=&quot;headerlink&quot; title=&quot;Android 倒计时CountDownTimer&quot;&gt;&lt;/a&gt;Android 倒计时CountDownTimer&lt;/h3&gt;
    
    </summary>
    
    
      <category term="工具类" scheme="http://www.999555yun.com/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
</feed>
